WAComponent subclass: #ConcederAcceso	instanceVariableNames: 'username contraseña'	classVariableNames: ''	package: 'CuOOra-UI'!!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:05'!model 	^ CuOOra soleInstance ! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:09'!contraseña:anObject	contraseña :=anObject! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:08'!contraseña	^contraseña! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:09'!username: anObject 	username:=anObject! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:08'!username	^username! !!ConcederAcceso methodsFor: 'accessing - private' stamp: 'donniyvalen 4/18/2020 15:30'!proceedWith: aUser	self session user: aUser.	self call: (HomeComponent usuario: aUser)! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:12'!renderButtonsOn: aCanvas	self subclassResponsibility! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:16'!renderInputElementsOn: aCanvas	aCanvas label: 'Username'.	aCanvas paragraph: [ aCanvas textInput on: #username of: self ].		aCanvas label: 'Contraseña'.	aCanvas paragraph: [ aCanvas passwordInput on: #contraseña of: self ]! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:15'!renderContentOn:aCanvas	aCanvas heading:[aCanvas tableRow:[							aCanvas tableData: 'CuOOra' . aCanvas tableData align: 'left'.							aCanvas space.							]].	aCanvas form: [ 		self renderInputElementsOn: aCanvas.		self renderButtonsOn: aCanvas ] ! !WAComponent subclass: #GeneralComponent	instanceVariableNames: 'cuoora usuario pregunta'	classVariableNames: ''	package: 'CuOOra-UI'!!GeneralComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/18/2020 15:26'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas space.	self formHome: aCanvas! !!GeneralComponent methodsFor: 'initialization' stamp: 'donniyvalen 4/18/2020 15:31'!initialize 	cuoora:=CuOOra soleInstance ! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:16'!navegarAlPerfil: userVisitado	self		call: (PerfilComponent usuario: usuario usuarioVistado: userVisitado)! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:24'!dibujarPregunta: aCanvas pregunta: eachP	self subclassResponsibility ! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:51'!dibujarTopicos: aCanvas pregunta: unaPregunta	unaPregunta topicos		do: [ :topico | 			aCanvas emphasis: topico nombre.			aCanvas space.]! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:25'!visualizarPregunta: eachP	self		call: (VisualizarPreguntaComponent usuario: usuario pregunta: eachP)! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:27'!formHome:aCanvas	self subclassResponsibility ! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:03'!encabezado:aCanvas	aCanvas render:(HeaderComponent padre: self usuario: usuario)	! !!GeneralComponent methodsFor: 'callback' stamp: 'donniyvalen 4/18/2020 15:26'!volver self subclassResponsibility ! !!GeneralComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/18/2020 15:23'!usuario:unUserusuario:=unUser! !!GeneralComponent methodsFor: 'callbacks' stamp: 'donniyvalen 4/18/2020 15:25'!like: unaPregunta	unaPregunta agregarVoto: (Voto like: true usuario: usuario)! !!GeneralComponent methodsFor: 'callbacks' stamp: 'ValentinColato 4/18/2020 16:21'!logout	self call: LoginComponent new! !!GeneralComponent methodsFor: 'callbacks' stamp: 'donniyvalen 4/18/2020 15:26'!responderPregunta: unaPregunta	self		call:			(ResponderComponent				usuario: usuario				pregunta: unaPregunta				cuoora: CuOOra soleInstance )! !!GeneralComponent methodsFor: 'callbacks' stamp: 'donniyvalen 4/18/2020 15:25'!dislike: unaPregunta	unaPregunta agregarVoto: (Voto like: false usuario: usuario)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GeneralComponent class	instanceVariableNames: ''!!GeneralComponent class methodsFor: 'accessing' stamp: 'donniyvalen 4/18/2020 15:23'!usuario:unUser^self new usuario:unUser! !WAComponent subclass: #HeaderComponent	instanceVariableNames: 'padre usuario'	classVariableNames: ''	package: 'CuOOra-UI'!!HeaderComponent methodsFor: 'accesing' stamp: 'ValentinColato 4/18/2020 16:01'!logout	padre logout! !!HeaderComponent methodsFor: 'accesing' stamp: 'ValentinColato 4/18/2020 16:02'!padre: unPadre usuario: unUsuario	padre := unPadre.	usuario := unUsuario! !!HeaderComponent methodsFor: 'rendering' stamp: 'ValentinColato 4/18/2020 18:53'!renderContentOn: aCanvas	aCanvas		form: [ aCanvas heading				level: 2;				with: [ aCanvas strong: 'CuOOra  '.					aCanvas space: 175.					aCanvas anchor						callback: [ self navegarAlPerfil ];						with: (usuario nombre splitOn: '@') first.					aCanvas space.					aCanvas submitButton						callback: [ self logout ];						with: 'Logout' ] ]! !!HeaderComponent methodsFor: 'callbacks' stamp: 'ValentinColato 4/18/2020 16:15'!navegarAlPerfil	padre navegarAlPerfil: usuario! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeaderComponent class	instanceVariableNames: ''!!HeaderComponent class methodsFor: 'constructor' stamp: 'ValentinColato 4/18/2020 16:04'!padre: unPadre usuario: unUsuario	^ self new padre: unPadre usuario: unUsuario! !GeneralComponent subclass: #HomeComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!HomeComponent methodsFor: 'callbacks' stamp: 'ValentinColato 4/9/2020 18:14'!volverself call:LoginComponent new.! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:52'!formHome: aCanvas	| cincoPreguntas |	aCanvas strong:'Ultimas preguntas'.	aCanvas		form: [ cincoPreguntas := cuoora obtenerPregFechaHora: usuario.			cincoPreguntas				ifNotNil: [ (cincoPreguntas takeFirst: 5)						do: [ :each | 							aCanvas								listItem: [ aCanvas anchor										with: [ self dibujarPregunta: aCanvas pregunta: each ] ] ] ] ].	aCanvas anchor		callback: [ self crearPregunta ];		with: 'Crear Pregunta'.	aCanvas space! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/10/2020 15:40'!crearPregunta	self call: (CrearPreguntaComponent usuario: usuario)! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:50'!dibujarPregunta: aCanvas pregunta: eachP	aCanvas anchor		callback: [ self visualizarPregunta: eachP ];		with: eachP titulo.	aCanvas		space;		text: '|';		space.	aCanvas anchor		callback:				[ self navegarAlPerfil: (CuOOra soleInstance creadaPorUsuario: eachP) ];		with: (CuOOra soleInstance creadaPor: eachP).	aCanvas		space;		text: '|';		space.	aCanvas submitButton		callback: [ self responderPregunta: eachP ];		with: 'Responder'.	aCanvas		break;		space;		space;		space;		space.		aCanvas emphasis:'Topicos: '.	self dibujarTopicos: aCanvas pregunta: eachP.	aCanvas break.	aCanvas submitButton		callback: [ self like: eachP ];		with: 'Like'.	aCanvas		space;		text: '|';		space.	aCanvas		text: eachP likes;		space;		text: 'Likes';		space;		text: '|';		space.	aCanvas submitButton		callback: [ self dislike: eachP ];		with: 'Dislike'.	aCanvas		space;		text: '|';		space.	aCanvas		text: eachP dislikes;		space;		text: 'Dislikes'.	aCanvas break.	aCanvas text: eachP descripcion.	aCanvas break.	aCanvas text: 'Respuestas: '.	aCanvas text: eachP cantRtas asString.	aCanvas break.	aCanvas horizontalRule! !!HomeComponent methodsFor: 'initialize' stamp: 'ValentinColato 4/14/2020 10:11'!edit: unUsuario	self call: (LoginComponent  new).! !ConcederAcceso subclass: #LoginComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!LoginComponent commentStamp: 'donniyvalen 4/14/2020 12:11' prior: 0!"| application |application := WAAdmin register: LoginComponent asApplicationAt: 'cuoora'.application sessionClass: SessionWithUser. "!!LoginComponent methodsFor: 'callback' stamp: 'donn1 4/6/2020 21:27'!acceder		(self model buscarUsuario: username contraseña: contraseña)		ifNotNil: [ :it | self proceedWith: it ].		username := nil.	contraseña := nil! !!LoginComponent methodsFor: 'as yet unclassified' stamp: 'donn1 4/6/2020 21:19'!registrarNuevoUsuario	self call: RegisterComponent new! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:18'!renderSignInButtonOn: aCanvas	aCanvas submitButton		callback: [ self acceder ];		with: 'Iniciar Sesión'! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:19'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registrarNuevoUsuario ];		with: 'Registrate!! es gratis!!'! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:18'!renderButtonsOn: aCanvas		self renderSignInButtonOn: aCanvas.	aCanvas horizontalRule.	aCanvas paragraph: 'No tiene una cuenta?'.	self renderSignUpButtonOn: aCanvas! !GeneralComponent subclass: #PerfilComponent	instanceVariableNames: 'usuarioVisitado'	classVariableNames: ''	package: 'CuOOra-UI'!!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 17:10'!formHome: aCanvas	| orderedPreguntas |	aCanvas text: 'Perfil de:      '.		aCanvas space.	aCanvas strong: usuarioVisitado nombre.	aCanvas space.	self agregarSeguir: aCanvas.	aCanvas horizontalRule.	aCanvas 		form: [ orderedPreguntas := usuarioVisitado preguntas				ifNotNil: [ usuarioVisitado preguntas asOrderedCollection						sorted: [ :p1 :p2 | p1 fechahora > p2 fechahora ] ].			orderedPreguntas				ifNotNil: [ orderedPreguntas						do: [ :each | 							aCanvas								listItem: [ aCanvas anchor										with: [ self dibujarPregunta: aCanvas pregunta: each ] ] ] ].			aCanvas submitButton				callback: [ self volver ];				with: 'Volver' ]! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:42'!usuario:unUser usuarioVistado:userVisitado	usuario:=unUser.	usuarioVisitado:=userVisitado ! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:36'!dibujarPregunta: aCanvas pregunta: eachP	aCanvas anchor		callback: [ self visualizarPregunta: eachP ];		with: eachP titulo.	aCanvas space.	aCanvas submitButton		callback: [ self responderPregunta: eachP ];		with: 'Responder'.	aCanvas break.	aCanvas		emphasis: 'Topicos';		space.	self dibujarTopicos: aCanvas pregunta: eachP.	aCanvas break.	aCanvas text: 'Respuestas: '.	aCanvas text: eachP cantRtas asString.	aCanvas break.	aCanvas		text: eachP likes;		space;		text: 'Likes '.	aCanvas		text: eachP dislikes;		space;		text: 'Dislikes'.	aCanvas break.	aCanvas submitButton		callback: [ self like: eachP ];		with: 'Like'.	aCanvas space.	aCanvas submitButton		callback: [ self dislike: eachP ];		with: 'Dislike'.	aCanvas break.	aCanvas horizontalRule! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:35'!agregarSeguir: aCanvas	usuario = usuarioVisitado		ifFalse: [ (usuario sigoA: usuarioVisitado)				ifFalse: [ aCanvas anchor						callback: [ usuario seguirA: usuarioVisitado ];						with: 'Seguir' ]				ifTrue: [ aCanvas anchor						callback: [ usuario dejarDeSeguirA: usuarioVisitado ];						with: 'Dejar de Seguir' ] ]! !!PerfilComponent methodsFor: 'callback' stamp: 'donniyvalen 4/18/2020 15:35'!volver	self call: (HomeComponent usuario: usuario)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilComponent class	instanceVariableNames: ''!!PerfilComponent class methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:41'!usuario:unUser usuarioVistado:userVisitado	^self new usuario:unUser usuarioVistado:userVisitado! !WAComponent subclass: #PreguntaComponent	instanceVariableNames: 'usuario titulo descr'	classVariableNames: ''	package: 'CuOOra-UI'!!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!descr	^descr! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!titulo	^titulo ! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:45'!titulo:anObject 	titulo:=anObject! !!PreguntaComponent methodsFor: 'accessing' stamp: 'ValentinColato 4/9/2020 18:18'!registrarPregunta		usuario agregarPregunta: (Pregunta titulo: titulo descr: descr topicos: (Topico nombre: 'a' desc:'b') ).	self answer.! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!descr: anObject	descr := anObject! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:34'!usuario:anObject	usuario:=anObject! !!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:06'!encabezado: aCanvas	aCanvas render:(HeaderComponent padre: self usuario: usuario)! !!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/6/2020 22:46'!preguntaForm: aCanvas	aCanvas label: 'Título'.	aCanvas paragraph: [ aCanvas textInput on: #titulo of: self ].	aCanvas label: 'Descripcion'.	aCanvas paragraph: [ aCanvas textInput on: #descr of: self ]! !!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/10/2020 15:37'!logout	self call: LoginComponent new.! !!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/6/2020 22:39'!cancelar		self answer! !!PreguntaComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/10/2020 14:50'!renderContentOn:aCanvas 		self subclassResponsibility! !!PreguntaComponent methodsFor: 'intialization' stamp: 'donniyvalen 4/10/2020 15:08'!initialize		titulo := nil.	descr := nil! !!PreguntaComponent methodsFor: 'intialization' stamp: 'ValentinColato 4/18/2020 16:13'!navegarAlPerfil: userVisitado	self		call: (PerfilComponent usuario: usuario usuarioVistado: userVisitado)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaComponent class	instanceVariableNames: ''!!PreguntaComponent class methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:34'!usuario:anObject	^self new usuario:anObject ! !PreguntaComponent subclass: #CrearPreguntaComponent	instanceVariableNames: 'topicosPregunta topicos'	classVariableNames: ''	package: 'CuOOra-UI'!!CrearPreguntaComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/14/2020 13:36'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas strong: 'Nueva Pregunta'.	aCanvas		form: [ aCanvas label: 'Título'.			aCanvas paragraph: [ aCanvas textInput on: #titulo of: self ].			aCanvas label: 'Descripcion'.			aCanvas paragraph: [ aCanvas textInput on: #descr of: self ].			aCanvas label: 'Agregar Topicos'.			aCanvas paragraph: [ aCanvas textInput on: #topicosPregunta of: self ].			aCanvas submitButton				callback: [ self registrarPregunta ];				with: 'Aceptar'.			aCanvas submitButton				callback: [ self cancelar ];				with: 'Cancelar' ]! !!CrearPreguntaComponent methodsFor: 'intialization' stamp: 'donniyvalen 4/14/2020 13:41'!initialize	super initialize.	topicosPregunta := ''.	topicos:=Set new.! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:15'!topicosPregunta^topicosPregunta ! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:15'!topicosPregunta:unTopicotopicosPregunta :=unTopico .! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:42'!seleccionarTopicos	"Selecciono los topicos ingresados separados por coma  "	| topicos_auxiliar  |	topicos_auxiliar := topicosPregunta splitOn: ','.	topicos_auxiliar		do: [ :each | topicos add:(Topico nombre: each asLowercase desc: nil) ].	^ topicos.! !!CrearPreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/14/2020 13:51'!registrarPregunta	"registro la pregunta y cargo los nuevos topicos en el sistem"	usuario		agregarPregunta:			(Pregunta titulo: titulo descr: descr topicos: self seleccionarTopicos).	(CuOOra soleInstance)agregarTopicos: self seleccionarTopicos.	self answer! !ConcederAcceso subclass: #RegisterComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!RegisterComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:18'!renderInputElementsOn: aCanvas 		super renderInputElementsOn: aCanvas! !!RegisterComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:37'!renderSignUpButtonOn: aCanvas	aCanvas submitButton 		callback: [ self registerAndLogin  ];		with:'Register'! !!RegisterComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:43'!renderButtonsOn: aCanvas	self renderSignUpButtonOn: aCanvas! !!RegisterComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:12'!registerAndLogin	| theUser |	theUser := Usuario nombre: username contraseña: contraseña.	self model agregarUsuario:theUser.	self proceedWith: theUser.! !WAComponent subclass: #ResponderComponent	instanceVariableNames: 'cuoora usuario pregunta newTextoRta'	classVariableNames: ''	package: 'CuOOra-UI'!!ResponderComponent methodsFor: 'rendering' stamp: 'ValentinColato 4/18/2020 18:05'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas label: pregunta titulo.	aCanvas		form: [ aCanvas				paragraph: [ aCanvas label: ''.					aCanvas textInput on: #newTextoRta of: self ].			aCanvas submitButton				callback: [ self responder ];				with: 'Responder'.				aCanvas space.			aCanvas submitButton				callback: [ self cancelar ];				with: 'Cancelar'.			aCanvas space ]! !!ResponderComponent methodsFor: 'callback' stamp: 'donniyvalen 4/10/2020 15:22'!responder	|rta|	rta:= Respuesta usuario: usuario texto: newTextoRta.	cuoora gestionarRta: rta p: pregunta u: usuario.				self volver.! !!ResponderComponent methodsFor: 'callback' stamp: 'ValentinColato 4/14/2020 10:29'!volver  self		call:			(VisualizarPreguntaComponent 				usuario: usuario				pregunta: pregunta)! !!ResponderComponent methodsFor: 'setter' stamp: 'ValentinColato 4/5/2020 14:45'!usuario:unUsuario pregunta:unaPregunta cuoora:unCuoora	usuario:=unUsuario .	pregunta:=unaPregunta.	cuoora :=unCuoora! !!ResponderComponent methodsFor: 'setter' stamp: 'ValentinColato 4/5/2020 18:19'!newTextoRta:unNewTextoRtanewTextoRta:=unNewTextoRta .! !!ResponderComponent methodsFor: 'acccessing' stamp: 'ValentinColato 4/5/2020 14:53'!newTextoRta^newTextoRta! !!ResponderComponent methodsFor: 'acccessing' stamp: 'ValentinColato 4/18/2020 16:13'!navegarAlPerfil: userVisitado	self		call: (PerfilComponent usuario: usuario usuarioVistado: userVisitado)! !!ResponderComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/10/2020 15:38'!logout	self call: LoginComponent new! !!ResponderComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:06'!encabezado: aCanvas	aCanvas render:(HeaderComponent padre: self usuario: usuario)! !!ResponderComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/6/2020 21:36'!cancelarself answer.! !!ResponderComponent methodsFor: 'initialization' stamp: 'ValentinColato 4/5/2020 18:44'!initialize super initialize .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ResponderComponent class	instanceVariableNames: ''!!ResponderComponent class methodsFor: 'constructor' stamp: 'ValentinColato 4/5/2020 14:49'!usuario:unUsuario pregunta:unaPregunta cuoora:unCuoora	^self new usuario:unUsuario pregunta:unaPregunta cuoora:unCuoora! !WASession subclass: #SessionWithUser	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-UI'!!SessionWithUser methodsFor: 'accessing' stamp: 'ValentinColato 4/6/2020 19:22'!user: anObject	user := anObject! !!SessionWithUser methodsFor: 'accessing' stamp: 'ValentinColato 4/6/2020 19:22'!user	^ user! !PreguntaComponent subclass: #VisualizarPreguntaComponent	instanceVariableNames: 'pregunta rtas'	classVariableNames: ''	package: 'CuOOra-UI'!!VisualizarPreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/10/2020 15:03'!like: unaRta	unaRta agregarVoto: (Voto like: true usuario: usuario)! !!VisualizarPreguntaComponent methodsFor: 'rendering' stamp: 'ValentinColato 4/18/2020 18:55'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas		form: [ aCanvas				strong: titulo;				space;				text: '|';				space.			aCanvas anchor				callback: [ self						navegarAlPerfil: (CuOOra soleInstance creadaPorUsuario: pregunta) ];				with: (CuOOra soleInstance creadaPor: pregunta).			aCanvas				space;				text: '|';				space.			aCanvas emphasis: descr.			aCanvas break.			aCanvas emphasis: 'Topicos: '.			self dibujarTopicos: aCanvas pregunta: pregunta.			aCanvas break.			aCanvas submitButton				callback: [ self responderPregunta: pregunta ];				with: 'Responder'.			aCanvas horizontalRule.			self dibujarRtas: aCanvas.			aCanvas horizontalRule.			aCanvas space.			aCanvas submitButton				callback: [ self volver ];				with: 'Volver' ]! !!VisualizarPreguntaComponent methodsFor: 'intialization' stamp: 'donniyvalen 4/10/2020 15:08'!initialize	super initialize.	pregunta := nil.	rtas := nil.! !!VisualizarPreguntaComponent methodsFor: 'intialization' stamp: 'donniyvalen 4/18/2020 15:38'!volver	self		call: (HomeComponent usuario: usuario)! !!VisualizarPreguntaComponent methodsFor: 'intialization' stamp: 'ValentinColato 4/18/2020 17:57'!navegarAlPerfil: userVisitado 	self		call: (PerfilComponent usuario: usuario usuarioVistado: userVisitado)! !!VisualizarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:54'!dibujarTopicos: aCanvas pregunta: unaPregunta	unaPregunta topicos		do: [ :topico | 			aCanvas emphasis: topico nombre.			aCanvas space ]! !!VisualizarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/10/2020 15:18'!usuario: unUsuario pregunta: unaPregunta	usuario := unUsuario.	pregunta:=unaPregunta.	titulo := unaPregunta titulo.	descr := unaPregunta descripcion.	rtas := unaPregunta rtasOrdenadas! !!VisualizarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:15'!dibujarRtas: aCanvas	aCanvas strong: 'Respuestas: '.	aCanvas break.	aCanvas break.	rtas		do: [ :rta | 			aCanvas				listItem: [ aCanvas text: rta texto.					aCanvas						space;						text: '|';						space.					aCanvas anchor						callback: [ self navegarAlPerfil: rta creadaPorUsuario ];						with: rta creadaPor.					aCanvas						space;						text: '|';						space.					aCanvas submitButton						callback: [ self like: rta ];						with: 'Like'.						aCanvas						space;						text: '|';						space.					aCanvas						text: rta likes;						space;						text: 'Likes';space;						text: '|';						space.					aCanvas submitButton						callback: [ self dislike: rta ];						with: 'Dislike'.					aCanvas						space;						text: '|';						space.						aCanvas						text: rta dislikes;						space;						text: 'Dislikes'.					aCanvas						break;						break ] ]! !!VisualizarPreguntaComponent methodsFor: 'callbacks' stamp: 'donniyvalen 4/10/2020 15:04'!responderPregunta: unaPregunta	self		call:			(ResponderComponent				usuario: usuario				pregunta: pregunta				cuoora: CuOOra soleInstance )! !!VisualizarPreguntaComponent methodsFor: 'callbacks' stamp: 'donniyvalen 4/10/2020 15:02'!dislike: unaRta	unaRta agregarVoto: (Voto like: false usuario: usuario)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VisualizarPreguntaComponent class	instanceVariableNames: ''!!VisualizarPreguntaComponent class methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/10/2020 14:56'!usuario:unUsuario pregunta:unaPregunta	^self new usuario:unUsuario pregunta:unaPregunta! !TestCase subclass: #CuOOraTest	instanceVariableNames: 'pregunta cuOOra usuario topico rta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!CuOOraTest methodsFor: 'running' stamp: 'ValentinColato 4/18/2020 19:10'!setUp	"auxiliares para el resto de los metodos de testeo"	cuOOra := CuOOra new.	usuario := Usuario nombre: 'Donni' contraseña: '0000'.	topico := Topico nombre: 'astrologia' desc: 'ascendente'.	pregunta := Pregunta		titulo: 'estamos en temporada aries?'		descr: 'transitos del sol'		topico: topico.	rta := Respuesta usuario: usuario! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:02'!testAgregarUsuario	"Agrego a un usuario y compruebo si esta en la coleccion"	cuOOra agregarUsuario: usuario.	self assert: (cuOOra usuarios includes: usuario)! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:04'!testBuscarTopico	"agrego un topico y compruebo si el metodo buscarTopico lo encuentra en la coleccion"	cuOOra agregarTopico: topico.	self assert: (cuOOra buscarTopico:'astrologia') equals: topico! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/18/2020 19:12'!testobtenerPreguntasRelevantesde	"Se considera relevante una pregunta cuando ésta perenece a un tópico de interés para elusuario en cuestión o bien cuando fue realizada por alguno de los usuarios quesigue en la red social."	| p_relevantes topicoD topicoL p1 p2 p3 usuario2 |	"agrego una pregunta con su topico al usuario"	usuario agregarPregunta: pregunta.	usuario agregarTopico: topico.	cuOOra agregarUsuario: usuario.	cuOOra agregarTopico: topico.	self		assert: ((cuOOra obtenerPreguntasRelevantesde: usuario) includes: pregunta).	"agrego una pregunta que no se encuentra en el topico del usuario"	topicoL := Topico nombre: 'conspinaracion' desc: 'la tierra es plana'.	p1 := Pregunta		titulo: '2+2'		descr: 'Es verdad que la matematica es relativa y la usan para dominarnos'		topico: topicoL.	usuario agregarPregunta: p1.	"creo un nuevo usuario y el usuario lo comienza a seguir"	topicoD := Topico		nombre: 'deportes'		desc: 'Actividad fisica la cual no es realizada por buenos programadores'.	p2 := Pregunta		titulo: 'es verdad que correr es bueno para la salud?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	p3 := Pregunta		titulo:			'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	usuario2 := Usuario nombre: 'marshal matters' contraseña: 'hailei'.	usuario2		agregarPregunta: p2;		agregarPregunta: p3.	usuario seguirA: usuario2.	cuOOra		agregarUsuario: usuario2;		agregarTopico: topicoD.	p_relevantes := cuOOra obtenerPreguntasRelevantesde: usuario.	self deny: (p_relevantes includes: p1).	self assert: (p_relevantes includes: p2).	self assert: (p_relevantes includes: p3)! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:06'!testBuscarUsuarioContraseña|user2|"agrego un usuario y compruebo si el metodo buscarUsuario lo encuentra en la coleccion"cuOOra agregarUsuario: usuario.self assert: ((cuOOra buscarUsuario: 'Donni' contraseña:'0000' ) = usuario)."Busco un usuario que jamas se agrego"user2:=Usuario nombre: 'a' contraseña:'a'. self deny: ((cuOOra buscarUsuario:'a' contraseña:'a' ) = user2).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:03'!testAgregarTopico"Agrego topico y compruebo si existe en la coleccion"	cuOOra agregarTopico: topico.	self assert:((cuOOra buscarTopico:(topico nombre))isNotNil  )."Compruebo si existe un topico que jamas se agrego"	self deny:((cuOOra buscarTopico:'martes') isNotNil ).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/18/2020 19:10'!testObtenerPregFechaHora	"este metodo las ordena de la mas nueva a la mas antigua"	| usuario2 preg1 preg2 |	usuario2 := Usuario nombre: 'soy un auxiliar' contraseña: ''.	preg1 := Pregunta		titulo: 'esta deberia ser la mas antigua'		descr: ''		topico: topico.	preg2 := Pregunta		titulo: 'y esta la mas nueva'		descr: ''		topicos: topico.	usuario seguirA: usuario2.	usuario2		agregarPregunta: preg1;		agregarPregunta: preg2.	cuOOra agregarUsuario: usuario2.	self assert: (cuOOra obtenerPregFechaHora: usuario) first = preg2! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 18:10'!testGestionarRtaPU	cuOOra gestionarRta: rta p: pregunta u: usuario.	self assert: (pregunta respuestas includes: rta).		self assert: (usuario respuestas includes: rta)! !!CuOOraTest methodsFor: 'tests' stamp: 'donniyvalen 4/14/2020 13:44'!testCreadaPor	| usuario2 |	"agrego una pregunta a un usuario y compruebo si el metodo creadoPor devuelve el usuario correcto"	usuario agregarPregunta: pregunta.	cuOOra agregarUsuario: usuario.	self assert: (cuOOra creadaPor: pregunta) equals: 'Donni'.	usuario2 := Usuario nombre: 'Fran' contraseña: '0000'.	cuOOra agregarUsuario: usuario2.	self deny: (cuOOra creadaPor: pregunta) = 'Fran'! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 22:19'!testobtenerPreguntas|preg usuario2 p1 |usuario2:=Usuario nombre:'juan'  contraseña:'pedro'.p1:=Pregunta titulo: 'es verdad que correr es bueno para la salud si sos de aries?' descr:'pregunta sobre habitos saludables'  topicos: topico.usuario2 agregarPregunta: p1.usuario agregarPregunta: pregunta.cuOOra agregarUsuario: usuario;agregarUsuario:  usuario2.preg:= cuOOra obtenerPreguntas.self assert:((preg includes:p1) and:(preg includes:pregunta)).! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 17:49'!testDevolverPregSegunTopico	"el metodo a testear devuelve una colección"	pregunta agregarTopico: topico.	usuario agregarPregunta: pregunta.	cuOOra agregarUsuario: usuario.	self deny: (cuOOra devolverPregSegunTopico: topico) isEmpty! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 16:46'!testCrearTopicoDesc	"el metodo a testear devuelve un objeto, es casi un constructor de Topico"	| topicoAux |	topicoAux := cuOOra crearTopico: 'gastronomia' desc: 'sobre comida'.	self deny: topicoAux nombre equals: 'futbol'! !TestCase subclass: #ElementoTest	instanceVariableNames: 'elemento voto usuario'	classVariableNames: ''	package: 'CuOOra-SUnit'!!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:30'!testbuscarVoto"Agrego un voto y busco si el voto esta en la coleccion"elemento agregarVoto: voto.self assert:((elemento buscarVoto: voto) isNotNil   )."elimino un voto y busco si esta en la coleccion"elemento  borrarVoto: voto.self deny:((elemento buscarVoto: voto) isNotNil   ).! !!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:30'!testAgregarVoto"Agrego un voto y reviso si esta en la coleccion"	elemento agregarVoto:voto.	self assert: (elemento votos detect: [ :each | (each meCreo) = (voto meCreo) ]) isNotNil .! !!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:37'!testLikes"agrego un voto positivo, otro negativo y reviso la cantidad de likes"elemento agregarVoto: voto.elemento agregarVoto: (Voto like:false usuario:(Usuario nombre: 'mcdonald' contraseña:'noescomida' ) ).self assert:(elemento likes = 1).elemento borrarVoto: voto.self deny:(elemento likes = 1).! !!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:32'!testBorrarVoto"agrego un voto, lo borro y reviso si existe todavia en la coleccion"elemento agregarVoto: voto.elemento borrarVoto: voto.self assert:((elemento buscarVoto: voto) isNil)! !!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:39'!testdislikes"agrego un voto positivo, otro negativo y reviso la cantidad de dislikes"|v2|elemento agregarVoto: voto.v2:=(Voto like:false usuario:(Usuario nombre: 'mcdonald' contraseña:'noescomida' )).elemento agregarVoto:v2.self assert:(elemento dislikes = 1).elemento borrarVoto: v2.self deny:(elemento dislikes = 1).! !!ElementoTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:30'!testCalcularPuntaje"agrego un voto y reviso si calcular puntaje es mayor a 0"	elemento agregarVoto:voto.	self assert: (elemento calcularPuntaje )>0! !!ElementoTest methodsFor: 'running' stamp: 'ValentinColato 4/14/2020 09:13'!setUp	elemento:=Elemento new.	usuario:=Usuario nombre:'donni' contraseña:'cuarentena'.	voto:= Voto like:true usuario:usuario.! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta rta1 rta2 top1'	classVariableNames: ''	package: 'CuOOra-SUnit'!!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 11:05'!testRtasOrdenadas		rta1 agregarVoto: (Voto like: false usuario: (Usuario nombre:'soy malo' contraseña:'voto negativo')).	rta2 agregarVoto: (Voto like:true usuario:(Usuario nombre: 'yo soy buena' contraseña:'voto positivo' )).		pregunta agregarRta: rta1; agregarRta: rta2.		self assert:(pregunta rtasOrdenadas ) first identicalTo: rta2! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 11:10'!testBorrarme		pregunta borrarme.	self assert: (pregunta respuestas) isEmpty ! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:43'!testEsMiTopico	|t1 t2|	"Pregunto por si existe un topico que jamas agregue"	self deny: (pregunta esMiTopico:(Topico nombre: 'astro3' desc:'no deberia estar' )).	"Agrego topicos y pregunto si existe uno de ellos"	t1:= Topico nombre: 'juan' desc:'no deberia estar' .	t2:= Topico nombre: 'juan2' desc:'no deberia estar' .	pregunta agregarTopico: t1;agregarTopico: t2.	self assert:(pregunta esMiTopico: t1).	! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:57'!testAgregarTopico	pregunta agregarTopico: (Topico nombre: 'astro2' desc: 'intermedio').		self assert: (pregunta devolverTopicos) size equals:2! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:55'!testAgregarRta	pregunta agregarRta:rta1.	self assert: (pregunta respuestas) size equals:1! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 09:53'!testmejorRespuesta"Voto dos respuestas y compruebo si la mejor respuesta es la de mayor votos positivos."| usuario1 usuario2|usuario1:=Usuario nombre: 'aaa' contraseña:'aaa'.usuario2:= Usuario nombre: 'holasoyjuan' contraseña:'jajaja'.rta1 agregarVoto:(Voto like: true usuario: usuario1).rta1 agregarVoto:(Voto like: false usuario: usuario2).rta2 agregarVoto:(Voto like: true usuario: usuario1).rta2 agregarVoto:(Voto like: true usuario: usuario2).pregunta agregarRta: rta1;agregarRta: rta2.self assert:(pregunta mejorRespuesta =rta2). self deny:(pregunta mejorRespuesta =rta1). ! !!PreguntaTest methodsFor: 'running' stamp: 'ValentinColato 4/18/2020 19:11'!setUp	top1 := Topico nombre: 'astrologia' desc: 'general'.	pregunta := Pregunta		titulo: 'cual es tu signo solar'		descr: 'basico'		topico: top1.	rta1 := Respuesta		usuario: (Usuario nombre: 'ada' contraseña: 'soyunagatita')		texto: 'piscis'.	rta2 := Respuesta		usuario: (Usuario nombre: 'aku' contraseña: 'yotbsoyungatito')		texto: 'escorpio'! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'rta usuario'	classVariableNames: ''	package: 'CuOOra-SUnit'!!RespuestaTest methodsFor: 'tests' stamp: 'valentinColato 4/3/2020 11:47'!testBorrarme	usuario agregarRta: rta.	rta borrarme.	self deny:( (usuario respuestas ) includes: rta).! !!RespuestaTest methodsFor: 'tests' stamp: 'donniyvalen 4/13/2020 21:18'!testCreadaPor	usuario agregarRta: rta.	self assert: (rta creadaPor) equals: 'kioki'! !!RespuestaTest methodsFor: 'running' stamp: 'donn1 4/3/2020 11:07'!setUp	usuario:=Usuario nombre:'kioki' contraseña:'miperritateamomucho'.	rta:= Respuesta usuario: usuario texto: 'no, no se puede sacar la basura de noche bro es re de mal vecino eso'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario pregunta topico respuesta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!UsuarioTest methodsFor: 'running' stamp: 'ValentinColato 4/18/2020 19:11'!setUp	"Hooks that subclasses may override to define the fixture of test."	usuario := Usuario nombre: 'valentin colato' contraseña: 'pepe'.	topico := Topico nombre: 'astrologia' desc: 'ascendente'.	pregunta := Pregunta		titulo: 'estamos en temporada aries?'		descr: 'transitos del sol'		topico: topico.	respuesta := Respuesta		usuario: usuario		texto: 'no amigo te equivocaste'! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 20:20'!testcalcularPuntaje"se calcula en función de su actividad en la red social. Por cada preguntarealizada, suma 20 puntos, y por cada respuesta a una pregunta que realizóotro usuario, suma 50 puntos. Además, se suma puntaje determinado por ladiferencia entre likes y dislikes de todas sus participaciones, que de tener masdislikes que likes, puede ser negativo."|usuario2 pregunta2 respuesta_usuario|self assert:(usuario calcularPuntaje =0)."El usuario responde a una pregunta y le califican la respuesta (suma 50 puntos + un dislike)"usuario2:=Usuario nombre:'juan'  contraseña:'pedro'.pregunta2:=Pregunta titulo: 'hace frio?' descr: 'pregunta realziada del clima' topicos:(Topico nombre: 'clima' desc:'llll' ).  usuario2 agregarPregunta: pregunta2.respuesta_usuario:=Respuesta usuario: usuario texto:'hace mas frio que en  la antartida ponete guantes'.usuario agregarRta: respuesta_usuario.usuario2 agregarVoto:(Voto like: false usuario:usuario2 )  elemento: respuesta_usuario. self assert:(usuario calcularPuntaje =49)."Se crea otra pregunta... y otro usuario le califica la pregunta suma 20 puntos + un like + 49 de la anterior..."usuario agregarPregunta: pregunta.usuario2 agregarVoto:(Voto like: true usuario:usuario2 )  elemento: pregunta. self assert:(usuario calcularPuntaje =70).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:47'!testBorrameusuario agregarRta: respuesta.usuario borrame: respuesta.self deny:(usuario respuestas includes:respuesta).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:53'!testagregarvotoelemento|voto|voto:= Voto like:true usuario:usuario .usuario agregarVoto: voto elemento:pregunta. self assert: (pregunta votos includes:voto)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:23'!testagregarTopicousuario agregarTopico:topico.self assert: (usuario topicos includes:topico)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/2/2020 09:51'!testdevolverPregSiguiendo|siguiendo1 siguiendo2 p1 p2 t preguntas_siguiendo |t:=Topico nombre: 'clima' desc: '....'.p1:=Pregunta titulo: 'Hace calor?' descr:'pregunta sobre clima'  topicos: t.p2:=Pregunta titulo: 'Hace frio?' descr:'pregunta sobre clima'  topicos: t.siguiendo1:= Usuario nombre: 'valentin' contraseña: '123'. siguiendo2:= Usuario nombre: 'lucas' contraseña: '123'.siguiendo1 agregarPregunta: p1.siguiendo2 agregarPregunta: p2.usuario seguirA: siguiendo1;seguirA:siguiendo2.preguntas_siguiendo:= usuario devolverPregSiguiendo .self assert:((preguntas_siguiendo includes:p1)and:(preguntas_siguiendo includes:p2)).! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/18/2020 15:12'!testagregarPregunta	usuario agregarPregunta: pregunta.	self assert: (usuario preguntas includes: pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/13/2020 20:48'!testEsMiPregunta	usuario agregarPregunta: pregunta.	self assert: (usuario esMiPregunta:pregunta) ! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/18/2020 19:12'!testdevolverPreguntasTopico	| topicoD p1 p2 preg_topicos |	topicoD := Topico		nombre: 'deportes'		desc: 'Actividad fisica la cual no es realizada por buenos programadores'.	p1 := Pregunta		titulo: 'es verdad que correr es bueno para la salud?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	p2 := Pregunta		titulo:			'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	usuario		agregarPregunta: p1;		agregarPregunta: p2;		agregarPregunta: pregunta.	preg_topicos := usuario devolverPreguntasTopico: topicoD.	self		assert: ((preg_topicos includes: p1) and: (preg_topicos includes: p2))! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:31'!testagregarVotoAPreg|voto|voto:= Voto like:true usuario:usuario .usuario agregarVoto: voto elemento:pregunta. self assert: (pregunta votos includes:voto)! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/18/2020 15:12'!testborrarPreg	usuario agregarPregunta: pregunta.	usuario borrarPreg: pregunta.	self deny: (usuario preguntas includes: pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:26'!testseguirA|user2|user2:= Usuario nombre: 'Gabriel Garcia Marquez' contraseña:'soledad'.usuario seguirA:user2.self assert:(usuario siguiendo includes: user2). ! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:20'!testagregarRtausuario agregarRta:respuesta.self assert: (usuario respuestas includes:respuesta)! !TestCase subclass: #VotoTest	instanceVariableNames: 'usuario voto topico pregunta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!VotoTest methodsFor: 'tests' stamp: 'ValentinColato 4/2/2020 10:15'!testmeCreovoto:= Voto like: true usuario: usuario.self assert:(voto meCreo = usuario ). ! !!VotoTest methodsFor: 'running' stamp: 'ValentinColato 4/2/2020 10:12'!setUp	"Hooks that subclasses may override to define the fixture of test."usuario:=Usuario nombre: 'pepe' contraseña:'pepemellamo'. ! !Object subclass: #CuOOra	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	package: 'CuOOra-Model'!!CuOOra methodsFor: 'accesing' stamp: 'donn1 4/1/2020 16:30'!agregarTopico: topico		topicos add:topico ! !!CuOOra methodsFor: 'accesing' stamp: 'ValentinColato 4/18/2020 17:47'!cargarDatosPersonales	"Metodo encargado de cargar los datos personales de los usuarios "	| diego juan pedro p1 p2 t1 t2 t3 r1 r2 |	pedro := Usuario		nombre: 'pedro@cuoora.com'		contraseña: 'pedro@cuoora.com'.	juan := Usuario		nombre: 'juan@cuoora.com'		contraseña: 'juan@cuoora.com'.	diego := Usuario		nombre: 'diego@cuoora.com'		contraseña: 'diego@cuoora.com'.	self		agregarUsuario: pedro;		agregarUsuario: juan;		agregarUsuario: diego.	juan seguirA: diego.	pedro seguirA: juan.	t1 := Topico nombre: 'OO1' desc: '...'.	t2 := Topico nombre: 'Test de unidad' desc: '...'.	self		agregarTopico: t1;		agregarTopico: t2.	p1 := Pregunta		titulo: '¿Para qué sirve el método SetUp?'		descr: '...'		topico: t1.	p1 agregarTopico: t2.	p1		agregarRta:			(Respuesta				usuario: diego				texto:					'Sirve para instanciar los objetos queson evaluados por el test en un único método y que seejecute siempre antes de cada test.').	pedro agregarPregunta: p1.	t3 := Topico nombre: 'Smalltalk' desc: '..'.	self agregarTopico: t3.	p2 := Pregunta		titulo: '¿Qué significa #messageNotUnderstood?'		descr: '...'		topico: t1.	p2 agregarTopico: t3.	r2 := Respuesta		usuario: pedro		texto:			'Significa que el objeto que recibió elmensaje no encontró ningún método para ejecutar enrespuesta.'.	p2 agregarRta: r2.	diego agregarPregunta: p2! !!CuOOra methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:53'!agregarTopicos: unosTopicos	unosTopicos do: [ :each | self agregarTopico: each ]! !!CuOOra methodsFor: 'accesing' stamp: 'donniyvalen 4/13/2020 21:02'!creadaPor: unaPregunta	|usuarioAux|	 usuarioAux:= usuarios detect: [ :each | each esMiPregunta: unaPregunta ] .	^usuarioAux nombre! !!CuOOra methodsFor: 'accesing' stamp: 'donniyvalen 4/13/2020 20:45'!obtenerPregFechaHora: unUsuario"las ordena de la mas nueva a la mas antigua"	^ (self obtenerPreguntasRelevantesde: unUsuario) asOrderedCollection		sorted: [ :p1 :p2 | p1 fechahora > p2 fechahora ]! !!CuOOra methodsFor: 'initialization' stamp: 'ValentinColato 4/9/2020 17:17'!initialize	topicos:= Set new.	usuarios:= Set new.	! !!CuOOra methodsFor: 'accessing' stamp: 'donn1 4/1/2020 16:15'!usuarios	 ^usuarios! !!CuOOra methodsFor: 'accessing' stamp: 'donniyvalen 4/14/2020 12:23'!topicos	^topicos! !!CuOOra methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 14:58'!creadaPorUsuario: unaPregunta	| usuarioAux |	usuarioAux := usuarios		detect: [ :each | each esMiPregunta: unaPregunta ].	^ usuarioAux ! !!CuOOra methodsFor: 'public'!agregarUsuario:unUsuario	usuarios add:unUsuario! !!CuOOra methodsFor: 'public'!devolverPregSegunTopico:unTopico		^  usuarios flatCollect:[ :usuario | usuario devolverPreguntasTopico:unTopico]	! !!CuOOra methodsFor: 'public' stamp: 'donn1 4/1/2020 17:35'!buscarTopico: unNombre	^ topicos		detect: [ :each | each nombre = unNombre ]		ifNone: [ nil ]! !!CuOOra methodsFor: 'public' stamp: 'ValentinColato 4/5/2020 09:46'!buscarUsuario:unNombre contraseña:unaContraseña	^ usuarios		detect: [ :each | each nombre = unNombre and:(each esMiContraseña: unaContraseña)]		ifNone: [ nil ]! !!CuOOra methodsFor: 'public' stamp: 'ValentinColato 4/2/2020 10:11'!obtenerPreguntasRelevantesde:usuario"Se considera relevante una pregunta cuando ésta pertenece a un tópico de interés para elusuario en cuestión o bien cuando fue realizada por alguno de los usuarios quesigue en la red social.addAll: (usuario siguiendo flatCollect:[:each| each devolverPreg ])."|preguntas topicos_relevantes preguntas_relevantes|topicos_relevantes:=usuario topicos.preguntas:=self obtenerPreguntas.preguntas_relevantes:= (preguntas select:[:pregunta| ( topicos_relevantes anySatisfy: [:topico| pregunta esMiTopico: topico]) ]).usuario devolverPregSiguiendo do:[:each| preguntas_relevantes add:each].^preguntas_relevantes.! !!CuOOra methodsFor: 'public'!gestionarRta:unaRta p:unaPreg u:unUsuario	unUsuario agregarRta:unaRta.	unaPreg agregarRta:unaRta.! !!CuOOra methodsFor: 'public' stamp: 'donn1 4/1/2020 17:18'!crearTopico: unNombre desc: unaDesc	| existe |	existe := self buscarTopico: unNombre.		existe		ifNil: [ | topico |			topico := Topico nombre: unNombre desc: unaDesc.			self agregarTopico: topico.			^ topico ]				ifNotNil: [ ^ existe ]! !!CuOOra methodsFor: 'public' stamp: 'donniyvalen 4/18/2020 15:13'!obtenerPreguntas	^ usuarios flatCollect: [ :each | each preguntas ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'instance creation' stamp: 'donn1 4/6/2020 21:07'!clearSoleInstance	soleInstance := nil! !!CuOOra class methodsFor: 'accessing' stamp: 'ValentinColato 4/9/2020 17:39'!soleInstance	^ soleInstance ifNil: [ soleInstance := ((self new)cargarDatosPersonales ) ]	! !Object subclass: #Elemento	instanceVariableNames: 'fechahora votos'	classVariableNames: ''	package: 'CuOOra-Model'!!Elemento methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:51'!initialize	fechahora := DateAndTime now.	votos := Set new.! !!Elemento methodsFor: 'protected' stamp: 'ValentinColato 4/14/2020 09:15'!buscarVoto: unVoto"Busca si el usuario ya ha votado el elemento"	^ votos		detect: [ :each | (each meCreo) = (unVoto meCreo) ]		ifNone: [ nil ]! !!Elemento methodsFor: 'accesing' stamp: 'donniyvalen 4/10/2020 15:50'!likes	^ (votos select: [ :each | each like]) size! !!Elemento methodsFor: 'accesing' stamp: 'ValentinColato 4/14/2020 09:27'!borrarVoto:voto "busca si el voto existe y lo borra de la coleccion"(self buscarVoto:voto) isNotNil ifTrue:[ votos remove:voto.]! !!Elemento methodsFor: 'accesing'!borrarme	^self subclassResponsibility! !!Elemento methodsFor: 'accesing' stamp: 'donn1 4/6/2020 20:59'!agregarVoto: unVoto	| votoViejo |	votoViejo := self buscarVoto: unVoto.	votoViejo		ifNil: [ votos add: unVoto ]		ifNotNil: [ votos				remove: votoViejo;				add:unVoto ]! !!Elemento methodsFor: 'accesing' stamp: 'donniyvalen 4/10/2020 15:50'!dislikes	^ (votos select: [ :each | each like not ]) size! !!Elemento methodsFor: 'accesing' stamp: 'ValentinColato 4/5/2020 18:26'!fechahora^fechahora! !!Elemento methodsFor: 'accesing' stamp: 'ValentinColato 4/1/2020 19:30'!votos^votos.! !!Elemento methodsFor: 'accesing'!calcularPuntaje"recorre votos y divide en dos sets sus votos para hacer el conteo, devuelve la diferencia"	| positivos negativos |	positivos := Set new.	negativos := Set new.	votos do: [ :each | each like				ifTrue: [ positivos add: each ]				ifFalse: [ negativos add: each ] ].	^ (positivos size - negativos size).! !Elemento subclass: #Pregunta	instanceVariableNames: 'titulo topicos rtas descr'	classVariableNames: ''	package: 'CuOOra-Model'!!Pregunta methodsFor: 'accesing'!rtasOrdenadas	^ rtas asSortedCollection: [ :unaRta :otraRta | unaRta calcularPuntaje > otraRta calcularPuntaje  ]! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/4/2020 23:49'!titulo^titulo! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/1/2020 21:05'!esMiTopico: topico	^topicos anySatisfy: [ :each | each nombre= topico nombre].	! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/3/2020 11:09'!borrarme	rtas do: [ :each | each borrarme. rtas remove:each]	 ! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/5/2020 19:22'!mejorRespuesta	| rtas_ord |	rtas_ord := (rtas asOrderedCollection sorted: [ :rta :rta2 | rta calcularPuntaje > rta2 calcularPuntaje ]).	rtas_ord ifNil: [ ^ nil ] ifNotNil: [ ^ rtas_ord first ]! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/6/2020 21:39'!cantRtas	^rtas size.! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/5/2020 14:24'!descripcion ^descr! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/1/2020 17:59'!agregarTopico: unTopico	topicos		detect: [ :each | each nombre =unTopico nombre ]		ifNone: [ topicos add: unTopico ]! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/1/2020 16:53'!respuestas	^rtas! !!Pregunta methodsFor: 'accesing'!devolverTopicos	^topicos! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 17:43'!recorrerTopicos	^ (topicos flatCollect: [ :top | top nombre ]) asString! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 17:48'!titulo: anObject1 descr: anObject3 topico: anObject4	titulo := anObject1.	descr := anObject3.	topicos add: anObject4! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/5/2020 14:24'!likes 	^ (votos select:[:each|each like ]) size! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/5/2020 14:25'!dislikes	 	^ (votos select:[:each|(each like) not ]) size! !!Pregunta methodsFor: 'setter'!agregarRta: unaRta	rtas add:unaRta! !!Pregunta methodsFor: 'setter' stamp: 'ValentinColato 4/18/2020 17:48'!titulo: anObject1 descr: anObject3 topicos: anObject4	titulo := anObject1.	descr := anObject3.	topicos := anObject4! !!Pregunta methodsFor: 'initialize' stamp: 'donn1 4/1/2020 18:00'!initialize	super initialize.	rtas := OrderedCollection new.	topicos := Set new! !!Pregunta methodsFor: 'accessing' stamp: 'ValentinColato 4/5/2020 13:39'!fechahora	^fechahora! !!Pregunta methodsFor: 'accessing' stamp: 'ValentinColato 4/18/2020 17:40'!topicos	^ topicos! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'constructor' stamp: 'ValentinColato 4/18/2020 17:48'!titulo: anObject1 descr: anObject2 topico: anObject3	^ self new titulo: anObject1 descr: anObject2 topico: anObject3! !!Pregunta class methodsFor: 'constructor' stamp: 'donn1 4/1/2020 16:43'!titulo: anObject1 descr: anObject2 topicos: anObject3	^ self new		titulo: anObject1		descr: anObject2		topicos: anObject3 ! !Elemento subclass: #Respuesta	instanceVariableNames: 'usuario texto'	classVariableNames: ''	package: 'CuOOra-Model'!!Respuesta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 17:55'!creadaPorUsuario	^ usuario ! !!Respuesta methodsFor: 'accessing' stamp: 'donn1 4/1/2020 16:52'!usuario: unUsuario texto:untexto	usuario := unUsuario.	texto:=untexto ! !!Respuesta methodsFor: 'accessing'!borrarme"invocado por pregunta"	usuario borrame: self! !!Respuesta methodsFor: 'accessing' stamp: 'ValentinColato 4/5/2020 19:10'!texto^texto .! !!Respuesta methodsFor: 'accessing'!usuario:unUsuario	usuario:=unUsuario! !!Respuesta methodsFor: 'accessing' stamp: 'donniyvalen 4/10/2020 15:32'!creadaPor	^usuario nombre! !!Respuesta methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:51'!initialize	super initialize.	usuario := nil! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'constructor' stamp: 'donn1 4/1/2020 16:52'!usuario: unUsuario texto:untexto	^ self new usuario: unUsuario texto:untexto! !!Respuesta class methodsFor: 'constructor'!usuario:unUsuario	^ self new usuario:unUsuario! !Object subclass: #Topico	instanceVariableNames: 'nombre desc'	classVariableNames: ''	package: 'CuOOra-Model'!!Topico methodsFor: 'setter' stamp: 'donn1 4/1/2020 17:29'!nombre: unNombre desc: unaDesc	nombre := unNombre.	desc := unaDesc! !!Topico methodsFor: 'accessing'!nombre	^nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'constructor' stamp: 'donn1 4/1/2020 17:28'!nombre:unNombre desc: unaDesc	^ self new nombre:unNombre desc: unaDesc! !Object subclass: #Usuario	instanceVariableNames: 'nombre contraseña fechahora siguiendo preguntas rtas topicos'	classVariableNames: ''	package: 'CuOOra-Model'!!Usuario methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:34'!dejarDeSeguirA:unUser	siguiendo remove:unUser! !!Usuario methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:28'!sigoA:unUser	^(siguiendo includes:unUser)! !!Usuario methodsFor: 'setter' stamp: 'donn1 4/1/2020 16:59'!nombre:unNombre contraseña: _contrasena	nombre :=unNombre.	contraseña := _contrasena! !!Usuario methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:42'!initialize	fechahora := DateAndTime.	siguiendo := Set new.	rtas := OrderedCollection new.	topicos := OrderedCollection new.	preguntas := OrderedCollection new.! !!Usuario methodsFor: 'protected' stamp: 'donn1 4/1/2020 18:10'!agregarRta: unaRta	rtas add:unaRta! !!Usuario methodsFor: 'protected' stamp: 'donniyvalen 4/18/2020 15:12'!devolverPregSiguiendo	^ siguiendo flatCollect: [ :each | each preguntas ]! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 4/1/2020 19:51'!borrarPreg: _preg"borra pregunta a la coleccion preguntas"preguntas remove: _preg.! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 4/1/2020 19:24'!topicos^topicos! !!Usuario methodsFor: 'protected'!calcularPuntaje"se calcula en función de su actividad en la red social. Por cada preguntarealizada, suma 20 puntos, y por cada respuesta a una pregunta que realizóotro usuario, suma 50 puntos. Además, se suma puntaje determinado por ladiferencia entre likes y dislikes de todas sus participaciones, que de tener masdislikes que likes, puede ser negativo."|puntaje_usuario|puntaje_usuario:=0.preguntas do:[:each | puntaje_usuario:= puntaje_usuario+ 20  + each calcularPuntaje ].rtas do:[:each | puntaje_usuario:= puntaje_usuario+ 50  + each calcularPuntaje ].^puntaje_usuario.! !!Usuario methodsFor: 'protected'!seguirA: _usersiguiendo  add: _user.! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 4/1/2020 19:26'!siguiendo^siguiendo.! !!Usuario methodsFor: 'protected' stamp: 'donn1 4/1/2020 17:46'!devolverPreguntasTopico: unTopico	^ preguntas select: [ :each | each esMiTopico:unTopico ]! !!Usuario methodsFor: 'protected'!agregarTopico: _topico"agrega topico a la coleccion topicos"topicos  add: _topico.! !!Usuario methodsFor: 'protected' stamp: 'donniyvalen 4/18/2020 15:02'!preguntas	^ preguntas! !!Usuario methodsFor: 'protected'!agregarVoto: _voto elemento: _elemento"agregar voto de pregunta o respuesta"_elemento agregarVoto: _voto.! !!Usuario methodsFor: 'protected'!borrame: unaRespuesta"borra la respuesta de su coleccion, metodo invocado por respuesta"	rtas remove: unaRespuesta! !!Usuario methodsFor: 'protected'!agregarPregunta: _pregunta"agrega pregunta a la coleccion preguntas"preguntas  add: _pregunta.! !!Usuario methodsFor: 'acccessing' stamp: 'donn1 4/1/2020 18:02'!respuestas	^rtas! !!Usuario methodsFor: 'acccessing' stamp: 'ValentinColato 4/14/2020 10:23'!esMiPregunta: unaPregunta^(preguntas select: [ :each | each = unaPregunta ]) isNotNil .	! !!Usuario methodsFor: 'acccessing' stamp: 'ValentinColato 4/5/2020 09:44'!esMiContraseña:unaContraseña^contraseña =unaContraseña . ! !!Usuario methodsFor: 'acccessing' stamp: 'ValentinColato 4/4/2020 23:33'!nombre^nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'constructor' stamp: 'donn1 4/1/2020 16:57'!nombre: _nombre contraseña: _contraseña	^ (self new )nombre: _nombre contraseña: _contraseña! !Object subclass: #Voto	instanceVariableNames: 'like fechahora usuario'	classVariableNames: ''	package: 'CuOOra-Model'!!Voto methodsFor: 'initialize'!initialize fechahora :=DateAndTime .! !!Voto methodsFor: 'public'!meCreo	^usuario! !!Voto methodsFor: 'public'!like	^like! !!Voto methodsFor: 'setter'!like: _like usuario:_usuariolike:=_like.usuario:=_usuario.! !!Voto methodsFor: 'setter' stamp: 'ValentinColato 4/5/2020 19:00'!usuario^usuario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'constructor'!like: _like usuario:_usuario^(self new)like: _like usuario:_usuario.! !