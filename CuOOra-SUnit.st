TestCase subclass: #CuOOraTest	instanceVariableNames: 'pregunta cuOOra usuario topico rta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 16:49'!testAgregarTopico	cuOOra agregarTopico: topico.	self deny: (cuOOra buscarTopico: 'astrologia') isNil.! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 17:49'!testDevolverPregSegunTopico	"el metodo a testear devuelve una colección"	pregunta agregarTopico: topico.	usuario agregarPregunta: pregunta.	cuOOra agregarUsuario: usuario.	self deny: (cuOOra devolverPregSegunTopico: topico) isEmpty! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 22:19'!testobtenerPreguntas|preg usuario2 p1 |usuario2:=Usuario nombre:'juan'  contraseña:'pedro'.p1:=Pregunta titulo: 'es verdad que correr es bueno para la salud si sos de aries?' descr:'pregunta sobre habitos saludables'  topicos: topico.usuario2 agregarPregunta: p1.usuario agregarPregunta: pregunta.cuOOra agregarUsuario: usuario;agregarUsuario:  usuario2.preg:= cuOOra obtenerPreguntas.self assert:((preg includes:p1) and:(preg includes:pregunta)).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/4/2020 23:25'!testBuscarUsuariocuOOra agregarUsuario: usuario.self assert: (cuOOra buscarUsuario: usuario).! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 16:46'!testCrearTopicoDesc	"el metodo a testear devuelve un objeto, es casi un constructor de Topico"	| topicoAux |	topicoAux := cuOOra crearTopico: 'gastronomia' desc: 'sobre comida'.	self deny: topicoAux nombre equals: 'futbol'! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 17:27'!testBuscarTopico	"el metodo a testear devuelve un objetp"	cuOOra agregarTopico: topico.	self assert: (cuOOra buscarTopico:'astrologia') equals: topico! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 18:10'!testGestionarRtaPU	cuOOra gestionarRta: rta p: pregunta u: usuario.	self assert: (pregunta respuestas includes: rta).		self assert: (usuario respuestas includes: rta)! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/2/2020 09:57'!testobtenerPreguntasRelevantesde"Se considera relevante una pregunta cuando ésta pertenece a un tópico de interés para elusuario en cuestión o bien cuando fue realizada por alguno de los usuarios quesigue en la red social."|p_relevantes topicoD topicoL p1 p2 p3   usuario2|"agrego una pregunta con su topico al usuario"usuario agregarPregunta:pregunta.usuario agregarTopico: topico.cuOOra agregarUsuario: usuario.cuOOra agregarTopico: topico.self assert:((cuOOra obtenerPreguntasRelevantesde:usuario) includes:pregunta)."agrego una pregunta que no se encuentra en el topico del usuario"topicoL:=Topico nombre: 'conspinaracion' desc:'la tierra es plana' .p1:=Pregunta titulo: '2+2' descr: 'Es verdad que la matematica es relativa y la usan para dominarnos' topicos:topicoL.usuario agregarPregunta: p1. "creo un nuevo usuario y el usuario lo comienza a seguir"topicoD:=Topico nombre: 'deportes' desc: 'Actividad fisica la cual no es realizada por buenos programadores'.p2:=Pregunta titulo: 'es verdad que correr es bueno para la salud?' descr:'pregunta sobre habitos saludables'  topicos: topicoD.p3:=Pregunta titulo: 'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?' descr:'pregunta sobre habitos saludables'  topicos: topicoD.usuario2:=Usuario nombre: 'marshal matters' contraseña: 'hailei'.usuario2 agregarPregunta: p2; agregarPregunta: p3.usuario seguirA:usuario2.cuOOra agregarUsuario: usuario2;agregarTopico:topicoD.p_relevantes:= cuOOra obtenerPreguntasRelevantesde:usuario.self deny:(p_relevantes includes:p1).self assert:(p_relevantes includes:p2).self assert:(p_relevantes includes:p3).! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 16:38'!testAgregarUsuario		cuOOra agregarUsuario: usuario.	self assert: (cuOOra usuarios includes: usuario)! !!CuOOraTest methodsFor: 'running' stamp: 'donn1 4/1/2020 16:51'!setUp	"auxiliares para el resto de los metodos de testeo"	cuOOra := CuOOra new.	usuario := Usuario nombre: 'Donni' contraseña: '0000'.	topico := Topico nombre: 'astrologia' desc: 'ascendente'.	pregunta := Pregunta		titulo: 'estamos en temporada aries?'		descr: 'transitos del sol'		topicos: topico.	rta := Respuesta usuario: usuario.! !TestCase subclass: #ElementoTest	instanceVariableNames: 'elemento voto'	classVariableNames: ''	package: 'CuOOra-SUnit'!!ElementoTest methodsFor: 'running' stamp: 'donn1 4/3/2020 10:32'!setUp	elemento:=Elemento new.	voto:= Voto like:true usuario:(Usuario nombre:'donni' contraseña:'cuarentena')! !!ElementoTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:33'!testAgregarVoto	elemento agregarVoto:voto.	self assert: (elemento buscarVoto:voto) isNotNil ! !!ElementoTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:52'!testCalcularPuntaje		elemento agregarVoto:voto.	self assert: (elemento calcularPuntaje )>0! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta rta1 rta2 top1'	classVariableNames: ''	package: 'CuOOra-SUnit'!!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:57'!testAgregarTopico	pregunta agregarTopico: (Topico nombre: 'astro2' desc: 'intermedio').		self assert: (pregunta devolverTopicos) size equals:2! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 11:10'!testBorrarme		pregunta borrarme.	self assert: (pregunta respuestas) isEmpty ! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 11:00'!testEsMiTopico	self deny: (pregunta esMiTopico:(Topico nombre: 'astro3' desc:'no deberia estar' )).	! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 11:05'!testRtasOrdenadas		rta1 agregarVoto: (Voto like: false usuario: (Usuario nombre:'soy malo' contraseña:'voto negativo')).	rta2 agregarVoto: (Voto like:true usuario:(Usuario nombre: 'yo soy buena' contraseña:'voto positivo' )).		pregunta agregarRta: rta1; agregarRta: rta2.		self assert:(pregunta rtasOrdenadas ) first identicalTo: rta2! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:55'!testAgregarRta	pregunta agregarRta:rta1.	self assert: (pregunta respuestas) size equals:1! !!PreguntaTest methodsFor: 'running' stamp: 'donn1 4/3/2020 10:54'!setUp		top1:=Topico nombre: 'astrologia' desc:'general'.	pregunta:=Pregunta titulo: 'cual es tu signo solar' descr:'basico'  topicos: top1.		rta1:=Respuesta usuario: (Usuario nombre: 'ada' contraseña: 'soyunagatita') texto: 'piscis'.	rta2:=Respuesta usuario: (Usuario nombre: 'aku' contraseña:'yotbsoyungatito' ) texto: 'escorpio'! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'rta usuario'	classVariableNames: ''	package: 'CuOOra-SUnit'!!RespuestaTest methodsFor: 'tests' stamp: 'valentinColato 4/3/2020 11:47'!testBorrarme	usuario agregarRta: rta.	rta borrarme.	self deny:( (usuario respuestas ) includes: rta).! !!RespuestaTest methodsFor: 'running' stamp: 'donn1 4/3/2020 11:07'!setUp	usuario:=Usuario nombre:'kioki' contraseña:'miperritateamomucho'.	rta:= Respuesta usuario: usuario texto: 'no, no se puede sacar la basura de noche bro es re de mal vecino eso'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario pregunta topico respuesta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!UsuarioTest methodsFor: 'running' stamp: 'ValentinColato 4/1/2020 19:19'!setUp	"Hooks that subclasses may override to define the fixture of test."	usuario := Usuario nombre: 'valentin colato' contraseña: 'pepe'.	topico := Topico nombre: 'astrologia' desc: 'ascendente'.	pregunta := Pregunta titulo: 'estamos en temporada aries?' descr: 'transitos del sol' 	topicos: topico.		respuesta:= Respuesta usuario: usuario texto:'no amigo te equivocaste' 	! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:31'!testagregarVotoAPreg|voto|voto:= Voto like:true usuario:usuario .usuario agregarVoto: voto elemento:pregunta. self assert: (pregunta votos includes:voto)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:53'!testagregarvotoelemento|voto|voto:= Voto like:true usuario:usuario .usuario agregarVoto: voto elemento:pregunta. self assert: (pregunta votos includes:voto)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 20:20'!testcalcularPuntaje"se calcula en función de su actividad en la red social. Por cada preguntarealizada, suma 20 puntos, y por cada respuesta a una pregunta que realizóotro usuario, suma 50 puntos. Además, se suma puntaje determinado por ladiferencia entre likes y dislikes de todas sus participaciones, que de tener masdislikes que likes, puede ser negativo."|usuario2 pregunta2 respuesta_usuario|self assert:(usuario calcularPuntaje =0)."El usuario responde a una pregunta y le califican la respuesta (suma 50 puntos + un dislike)"usuario2:=Usuario nombre:'juan'  contraseña:'pedro'.pregunta2:=Pregunta titulo: 'hace frio?' descr: 'pregunta realziada del clima' topicos:(Topico nombre: 'clima' desc:'llll' ).  usuario2 agregarPregunta: pregunta2.respuesta_usuario:=Respuesta usuario: usuario texto:'hace mas frio que en  la antartida ponete guantes'.usuario agregarRta: respuesta_usuario.usuario2 agregarVoto:(Voto like: false usuario:usuario2 )  elemento: respuesta_usuario. self assert:(usuario calcularPuntaje =49)."Se crea otra pregunta... y otro usuario le califica la pregunta suma 20 puntos + un like + 49 de la anterior..."usuario agregarPregunta: pregunta.usuario2 agregarVoto:(Voto like: true usuario:usuario2 )  elemento: pregunta. self assert:(usuario calcularPuntaje =70).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:47'!testBorrameusuario agregarRta: respuesta.usuario borrame: respuesta.self deny:(usuario respuestas includes:respuesta).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 20:39'!testdevolverPreguntasTopico|topicoD p1 p2 preg_topicos|topicoD:=Topico nombre: 'deportes' desc: 'Actividad fisica la cual no es realizada por buenos programadores'.p1:=Pregunta titulo: 'es verdad que correr es bueno para la salud?' descr:'pregunta sobre habitos saludables'  topicos: topicoD.p2:=Pregunta titulo: 'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?' descr:'pregunta sobre habitos saludables'  topicos: topicoD.usuario agregarPregunta: p1;agregarPregunta: p2;agregarPregunta: pregunta.preg_topicos:=usuario devolverPreguntasTopico: topicoD.self assert:((preg_topicos includes:p1)  and: (preg_topicos includes: p2) ).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 23:49'!testborrarPregusuario agregarPregunta: pregunta.usuario borrarPreg: pregunta.self deny: (usuario devolverPreg includes:pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:18'!testagregarPreguntausuario agregarPregunta: pregunta.self assert: (usuario devolverPreg includes:pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/2/2020 09:51'!testdevolverPregSiguiendo|siguiendo1 siguiendo2 p1 p2 t preguntas_siguiendo |t:=Topico nombre: 'clima' desc: '....'.p1:=Pregunta titulo: 'Hace calor?' descr:'pregunta sobre clima'  topicos: t.p2:=Pregunta titulo: 'Hace frio?' descr:'pregunta sobre clima'  topicos: t.siguiendo1:= Usuario nombre: 'valentin' contraseña: '123'. siguiendo2:= Usuario nombre: 'lucas' contraseña: '123'.siguiendo1 agregarPregunta: p1.siguiendo2 agregarPregunta: p2.usuario seguirA: siguiendo1;seguirA:siguiendo2.preguntas_siguiendo:= usuario devolverPregSiguiendo .self assert:((preguntas_siguiendo includes:p1)and:(preguntas_siguiendo includes:p2)).! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:20'!testagregarRtausuario agregarRta:respuesta.self assert: (usuario respuestas includes:respuesta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:26'!testseguirA|user2|user2:= Usuario nombre: 'Gabriel Garcia Marquez' contraseña:'soledad'.usuario seguirA:user2.self assert:(usuario siguiendo includes: user2). ! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:23'!testagregarTopicousuario agregarTopico:topico.self assert: (usuario topicos includes:topico)! !TestCase subclass: #VotoTest	instanceVariableNames: 'usuario voto topico pregunta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!VotoTest methodsFor: 'running' stamp: 'ValentinColato 4/2/2020 10:12'!setUp	"Hooks that subclasses may override to define the fixture of test."usuario:=Usuario nombre: 'pepe' contraseña:'pepemellamo'. ! !!VotoTest methodsFor: 'tests' stamp: 'ValentinColato 4/2/2020 10:15'!testmeCreovoto:= Voto like: true usuario: usuario.self assert:(voto meCreo = usuario ). ! !