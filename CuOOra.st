TestCase subclass: #CuOOraTest	instanceVariableNames: 'pregunta cuOOra usuario topico rta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!CuOOraTest methodsFor: 'tests' stamp: 'donni 5/15/2020 18:24'!testDejarDeSeguirA	| user2 |	user2 := Usuario		newWithNombre: 'Gabriel Garcia Marquez'		contraseña: 'soledad'.	usuario seguirA:user2.	usuario dejarDeSeguirA: user2.	self deny: (usuario siguiendo includes: user2)! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:25'!testobtenerPreguntas|preg usuario2 p1 |usuario2:=Usuario newWithNombre:'juan'  contraseña:'pedro'.p1:=Pregunta newWithTitulo: 'es verdad que correr es bueno para la salud si sos de aries?' descr:'pregunta sobre habitos saludables'  topicos: topico.usuario2 agregarPregunta: p1.usuario agregarPregunta: pregunta.cuOOra agregarUsuario: usuario;agregarUsuario:  usuario2.preg:= cuOOra obtenerPreguntas.self assert:((preg includes:p1) and:(preg includes:pregunta)).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:25'!testObtenerPregFechaHora	"este metodo las ordena de la mas nueva a la mas antigua"	| usuario2 preg1 preg2 |	usuario2 := Usuario newWithNombre: 'soy un auxiliar' contraseña: ''.	preg1 := Pregunta		newWithTitulo: 'esta deberia ser la mas antigua'		descr: ''		topico: topico.	preg2 := Pregunta		newWithTitulo: 'y esta la mas nueva'		descr: ''		topicos: topico.	usuario seguirA: usuario2.	usuario2		agregarPregunta: preg1;		agregarPregunta: preg2.	cuOOra agregarUsuario: usuario2.	self assert: (cuOOra obtenerPregFechaHora: usuario) first = preg2! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 16:46'!testCrearTopicoDesc	"el metodo a testear devuelve un objeto, es casi un constructor de Topico"	| topicoAux |	topicoAux := cuOOra crearTopico: 'gastronomia' desc: 'sobre comida'.	self deny: topicoAux nombre equals: 'futbol'! !!CuOOraTest methodsFor: 'tests' stamp: 'donn1 4/1/2020 17:49'!testDevolverPregSegunTopico	"el metodo a testear devuelve una colección"	pregunta agregarTopico: topico.	usuario agregarPregunta: pregunta.	cuOOra agregarUsuario: usuario.	self deny: (cuOOra devolverPregSegunTopico: topico) isEmpty! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:22'!testCreadaPorUsuario	| usuario2 |	"agrego una pregunta a un usuario y compruebo si el metodo creadoPor devuelve el usuario correcto"	usuario agregarPregunta: pregunta.	cuOOra agregarUsuario: usuario.	self assert: (cuOOra creadaPorUsuario: pregunta) equals: usuario.	usuario2 := Usuario newWithNombre: 'Fran' contraseña: '0000'.	cuOOra agregarUsuario: usuario2.	self deny: (cuOOra creadaPorUsuario: pregunta) = usuario2! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:24'!testobtenerPreguntasRelevantesde	| p_relevantes topicoD p1 p2 p3 usuario2 usuario3 |	"agrego una pregunta con su topico al usuario"	usuario agregarTopico: topico.	cuOOra agregarUsuario: usuario.	cuOOra agregarTopico: topico.	"agrego una pregunta que no se encuentra en el topico del usuario"	usuario2 := Usuario newWithNombre: 'marshal matters' contraseña: 'hailei'.	usuario3 := Usuario		newWithNombre: 'jack sparrow'		contraseña: 'keith richard'.	usuario seguirA: usuario2.	p1 := Pregunta		newWithTitulo: '2+2'		descr: 'Es verdad que la matematica es relativa y la usan para dominarnos'		topico: topico.	usuario2 agregarPregunta: p1.	"creo un nuevo usuario y el usuario lo comienza a seguir"	topicoD := Topico		newWithNombre: 'deportes'		desc: 'Actividad fisica la cual no es realizada por buenos programadores'.	p2 := Pregunta		newWithTitulo: 'es verdad que correr es bueno para la salud?'		descr: 'pregunta sobre habitos saludables'		topico: topico.	p3 := Pregunta		newWithTitulo:			'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	usuario2 agregarPregunta: p2.	usuario3 agregarPregunta: p3.	cuOOra		agregarUsuario: usuario2;		agregarUsuario: usuario3;		agregarTopico: topicoD.	p_relevantes := cuOOra obtenerPreguntasRelevantesde: usuario.	self assert: (p_relevantes includes: p1).	self assert: (p_relevantes includes: p2).	self deny: (p_relevantes includes: p3).	self assert: p_relevantes size equals: 2! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:04'!testBuscarTopico	"agrego un topico y compruebo si el metodo buscarTopico lo encuentra en la coleccion"	cuOOra agregarTopico: topico.	self assert: (cuOOra buscarTopico:'astrologia') equals: topico! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/14/2020 10:03'!testAgregarTopico"Agrego topico y compruebo si existe en la coleccion"	cuOOra agregarTopico: topico.	self assert:((cuOOra buscarTopico:(topico nombre))isNotNil  )."Compruebo si existe un topico que jamas se agrego"	self deny:((cuOOra buscarTopico:'martes') isNotNil ).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:22'!testBuscarUsuarioContraseña|user2|"agrego un usuario y compruebo si el metodo buscarUsuario lo encuentra en la coleccion"cuOOra agregarUsuario: usuario.self assert: ((cuOOra buscarUsuario: 'Donni' contraseña:'0000' ) = usuario)."Busco un usuario que jamas se agrego"user2:=Usuario newWithNombre: 'a' contraseña:'a'. self deny: ((cuOOra buscarUsuario:'a' contraseña:'a' ) = user2).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:22'!testAgregarUsuario|usuario2|	"Agrego a un usuario y compruebo si esta en la coleccion"	usuario2:=Usuario newWithNombre: 'aa' contraseña:'bb'. 		cuOOra agregarUsuario: usuario.	self assert: (cuOOra usuarios includes: usuario).	cuOOra agregarUsuario: usuario2.	self assert: (cuOOra usuarios includes: usuario).! !!CuOOraTest methodsFor: 'tests' stamp: 'ValentinColato 4/19/2020 10:25'!testAgregarTopicos|top|"Agrego topico y compruebo si existe en la coleccion"	top:=Set new.	top add:topico.	cuOOra agregarTopicos:top.	self assert:((cuOOra buscarTopico:(topico nombre))isNotNil  )."Compruebo si existe un topico que jamas se agrego"	self deny:((cuOOra buscarTopico:'martes') isNotNil ).! !!CuOOraTest methodsFor: 'running' stamp: 'ValentinColato 5/13/2020 18:35'!setUp	"auxiliares para el resto de los metodos de testeo"	cuOOra := CuOOra new.	usuario := Usuario newWithNombre: 'Donni' contraseña: '0000'.	topico := Topico newWithNombre: 'astrologia' desc: 'ascendente'.	pregunta := Pregunta		newWithTitulo: 'estamos en temporada aries?'		descr: 'transitos del sol'		topico: topico.	rta := (Respuesta newWithUsuario: usuario texto: 'es una respuesta')! !TestCase subclass: #PostTest	instanceVariableNames: 'pregunta voto usuario'	classVariableNames: ''	package: 'CuOOra-SUnit'!!PostTest methodsFor: 'running' stamp: 'ValentinColato 5/13/2020 18:30'!setUp	usuario := Usuario newWithNombre: 'donni' contraseña: 'cuarentena'.	voto := Voto newWithLike:  usuario.	pregunta := Pregunta		newWithTitulo: 'hola'		descr: 'hola'		topico: (Topico newWithNombre: 'coronavirus' desc: 'noticieros')! !!PostTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:30'!testLikes	"agrego un voto positivo, otro negativo y reviso la cantidad de likes"	pregunta agregarVoto: voto.	pregunta		agregarVoto:			(Voto newWithDislike: (Usuario newWithNombre: 'mcdonald' contraseña: 'noescomida')).	self assert: pregunta likes = 1.	pregunta borrarVoto: voto.	self deny: pregunta likes = 1! !!PostTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:30'!testdislikes	"agrego un voto positivo, otro negativo y reviso la cantidad de dislikes"	| v2 |	pregunta agregarVoto: voto.	v2 := Voto newWithDislike: (Usuario newWithNombre: 'mcdonald' contraseña: 'noescomida').	pregunta agregarVoto: v2.	self assert: pregunta dislikes = 1.	pregunta borrarVoto: v2.	self deny: pregunta dislikes = 1! !!PostTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 16:27'!testBorrarVoto	"agrego un voto, lo borro y reviso si existe todavia en la coleccion"	pregunta agregarVoto: voto.	pregunta borrarVoto: voto.	self deny: (pregunta votos anySatisfy: [ :each | each = voto ])! !!PostTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 16:27'!testCalcularPuntaje	"agrego un voto y reviso si calcular puntaje es mayor a 0"	pregunta agregarVoto: voto.	self assert: pregunta calcularPuntaje > 0! !!PostTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 16:27'!testAgregarVoto	"Agrego un voto y reviso si esta en la coleccion"	pregunta agregarVoto: voto.	self		assert:			(pregunta votos detect: [ :each | each meCreo = voto meCreo ])				isNotNil! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta rta1 rta2 top1'	classVariableNames: ''	package: 'CuOOra-SUnit'!!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 18:12'!testEsUnaDeMisRtaspregunta agregarRta: rta1.self assert:(pregunta esUnaDeMisRtas: rta1).self deny:(pregunta esUnaDeMisRtas:rta2).! !!PreguntaTest methodsFor: 'tests' stamp: 'donn1 4/3/2020 10:55'!testAgregarRta	pregunta agregarRta:rta1.	self assert: (pregunta respuestas) size equals:1! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:29'!testRtasOrdenadas	rta1		agregarVoto:			(Voto newWithDislike: (Usuario newWithNombre: 'soy malo' contraseña: 'voto negativo')).	rta2		agregarVoto:			(Voto				newWithLike: (Usuario newWithNombre: 'yo soy buena' contraseña: 'voto positivo')).	pregunta		agregarRta: rta1;		agregarRta: rta2.	self assert: pregunta rtasOrdenadas first identicalTo: rta2! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:23'!testEsMiTopico	|t1 t2|	"Pregunto por si existe un topico que jamas agregue"	self deny: (pregunta esMiTopico:(Topico newWithNombre: 'astro3' desc:'no deberia estar' )).	"Agrego topicos y pregunto si existe uno de ellos"	t1:= Topico newWithNombre: 'juan' desc:'no deberia estar' .	t2:= Topico newWithNombre: 'juan2' desc:'no deberia estar' .	pregunta agregarTopico: t1;agregarTopico: t2.	self assert:(pregunta esMiTopico: t1).	! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 15:07'!testBorrarme	pregunta borrarme.	self assert: pregunta respuestas isEmpty! !!PreguntaTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:23'!testAgregarTopico	pregunta agregarTopico: (Topico newWithNombre: 'astro2' desc: 'intermedio').		self assert: (pregunta devolverTopicos) size equals:2! !!PreguntaTest methodsFor: 'running' stamp: 'ValentinColato 5/7/2020 22:24'!setUp	top1 := Topico newWithNombre: 'astrologia' desc: 'general'.	pregunta := Pregunta		newWithTitulo: 'cual es tu signo solar'		descr: 'basico'		topico: top1.	rta1 := Respuesta		newWithUsuario: (Usuario newWithNombre: 'ada' contraseña: 'soyunagatita')		texto: 'piscis'.	rta2 := Respuesta		newWithUsuario: (Usuario newWithNombre: 'aku' contraseña: 'yotbsoyungatito')		texto: 'escorpio'! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'rta usuario'	classVariableNames: ''	package: 'CuOOra-SUnit'!!RespuestaTest methodsFor: 'running' stamp: 'ValentinColato 5/7/2020 22:24'!setUp	usuario:=Usuario newWithNombre:'kioki' contraseña:'miperritateamomucho'.	rta:= Respuesta newWithUsuario: usuario texto: 'no, no se puede sacar la basura de noche bro es re de mal vecino eso'! !!RespuestaTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 17:10'!testBorrarme	rta borrarme.	self deny: (usuario respuestas includes: rta)! !!RespuestaTest methodsFor: 'tests' stamp: 'donniyvalen 5/13/2020 18:58'!testCreadaPor	usuario agregarRta: rta.	self assert: rta creadaPor nombre equals: 'kioki'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario pregunta topico respuesta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!UsuarioTest methodsFor: 'running' stamp: 'donni 5/15/2020 18:20'!setUp	"Hooks that subclasses may override to define the fixture of test."		usuario := Usuario		newWithNombre: 'valentin colato'		contraseña: 'pepe'.	topico := Topico newWithNombre: 'astrologia' desc: 'ascendente'.		pregunta := Pregunta		newWithTitulo: 'estamos en temporada aries?'		descr: 'transitos del sol'		topico: topico.			respuesta := Respuesta		newWithUsuario: usuario		texto: 'no amigo te equivocaste'			! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:22'!testsigoA|usuario2|usuario2:= Usuario newWithNombre:'a' contraseña: 'a'.usuario seguirA:usuario2.self assert:(usuario sigoA:usuario2)	! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 4/1/2020 19:23'!testagregarTopicousuario agregarTopico:topico.self assert: (usuario topicos includes:topico)! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/18/2020 15:12'!testborrarPreg	usuario agregarPregunta: pregunta.	usuario borrarPreg: pregunta.	self deny: (usuario preguntas includes: pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:24'!testdevolverPreguntasTopico	| topicoD p1 p2 preg_topicos |	topicoD := Topico		newWithNombre: 'deportes'		desc: 'Actividad fisica la cual no es realizada por buenos programadores'.	p1 := Pregunta		newWithTitulo: 'es verdad que correr es bueno para la salud?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	p2 := Pregunta		newWithTitulo:			'es verdad que comer hamburguesa de mcdonalds es bueno para la salud>?'		descr: 'pregunta sobre habitos saludables'		topico: topicoD.	usuario		agregarPregunta: p1;		agregarPregunta: p2;		agregarPregunta: pregunta.	preg_topicos := usuario devolverPreguntasTopico: topicoD.	self		assert: ((preg_topicos includes: p1) and: (preg_topicos includes: p2))! !!UsuarioTest methodsFor: 'tests' stamp: 'donni 5/15/2020 18:30'!testCalcularPreguntas		usuario agregarPregunta: pregunta.	pregunta agregarRta: respuesta.	self assert: usuario calcularPuntaje equals: 20! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 17:10'!testBorrarRta	usuario borrarRta: respuesta.	self deny: (usuario respuestas includes: respuesta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:27'!testagregarVotoAPreg	| voto |	voto := Voto newWithLike:  usuario.	usuario agregarVoto: voto elemento: pregunta.	self assert: (pregunta votos includes: voto)! !!UsuarioTest methodsFor: 'tests' stamp: 'donni 5/15/2020 18:19'!testEsMiContraseña	self deny: (usuario esMiContraseña:'0001')! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:22'!testseguirA|user2|user2:= Usuario newWithNombre: 'Gabriel Garcia Marquez' contraseña:'soledad'.usuario seguirA:user2.self assert:(usuario siguiendo includes: user2). ! !!UsuarioTest methodsFor: 'tests' stamp: 'donni 5/15/2020 18:25'!testSigoA| user2 |	user2 := Usuario		newWithNombre: 'Arthur Rimbaud'		contraseña: 'lesfleursdumal'.	usuario seguirA: user2.	self assert: (usuario sigoA: user2)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 22:25'!testdevolverPregSiguiendo|siguiendo1 siguiendo2 p1 p2 t preguntas_siguiendo |t:=Topico newWithNombre: 'clima' desc: '....'.p1:=Pregunta newWithTitulo: 'Hace calor?' descr:'pregunta sobre clima'  topicos: t.p2:=Pregunta newWithTitulo: 'Hace frio?' descr:'pregunta sobre clima'  topicos: t.siguiendo1:= Usuario newWithNombre: 'valentin' contraseña: '123'. siguiendo2:= Usuario newWithNombre: 'lucas' contraseña: '123'.siguiendo1 agregarPregunta: p1.siguiendo2 agregarPregunta: p2.usuario seguirA: siguiendo1;seguirA:siguiendo2.preguntas_siguiendo:= usuario devolverPregSiguiendo .self assert:((preguntas_siguiendo includes:p1)and:(preguntas_siguiendo includes:p2)).! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/13/2020 20:48'!testEsMiPregunta	usuario agregarPregunta: pregunta.	self assert: (usuario esMiPregunta:pregunta) ! !!UsuarioTest methodsFor: 'tests' stamp: 'donniyvalen 4/18/2020 15:12'!testagregarPregunta	usuario agregarPregunta: pregunta.	self assert: (usuario preguntas includes: pregunta)! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/7/2020 15:53'!testAgregarRta 	self assert: (usuario respuestas includes:respuesta)! !!UsuarioTest methodsFor: 'tests' stamp: 'donni 5/15/2020 18:33'!testCalcularRespuestas	| juan pregunta2 rta_usuario |	juan := Usuario newWithNombre: 'juan' contraseña: 'pedro'.	pregunta2 := Pregunta		newWithTitulo: 'hace frio?'		descr: 'pregunta realziada del clima'		topicos: (Topico newWithNombre: 'clima' desc: 'llll').	juan agregarPregunta: pregunta2.	rta_usuario := Respuesta		newWithUsuario: usuario		texto: 'hace mas frio que en  la antartida, ponete guantes'.	pregunta2 agregarRta: rta_usuario.	juan agregarVoto: (Voto newWithLike: usuario) elemento: rta_usuario.	usuario agregarPregunta: pregunta.	pregunta agregarRta: respuesta.	self assert: usuario calcularPuntaje equals: 71! !!UsuarioTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:27'!testagregarvotoelemento	| voto |	voto := Voto newWithLike: usuario.	usuario agregarVoto: voto elemento: pregunta.	self assert: (pregunta votos includes: voto)! !TestCase subclass: #VotoTest	instanceVariableNames: 'usuario voto topico pregunta'	classVariableNames: ''	package: 'CuOOra-SUnit'!!VotoTest methodsFor: 'running' stamp: 'ValentinColato 5/7/2020 22:22'!setUp	"Hooks that subclasses may override to define the fixture of test."usuario:=Usuario newWithNombre: 'pepe' contraseña:'pepemellamo'. ! !!VotoTest methodsFor: 'tests' stamp: 'ValentinColato 5/13/2020 18:27'!testmeCreo	voto := Voto newWithLike:  usuario.	self assert: voto meCreo = usuario! !Object subclass: #CuOOra	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	package: 'CuOOra-Model'!!CuOOra methodsFor: 'initialization' stamp: 'ValentinColato 4/9/2020 17:17'!initialize	topicos:= Set new.	usuarios:= Set new.	! !!CuOOra methodsFor: 'public'!agregarUsuario:unUsuario	usuarios add:unUsuario! !!CuOOra methodsFor: 'public' stamp: 'donn1 4/1/2020 17:35'!buscarTopico: unNombre	^ topicos		detect: [ :each | each nombre = unNombre ]		ifNone: [ nil ]! !!CuOOra methodsFor: 'public'!devolverPregSegunTopico:unTopico		^  usuarios flatCollect:[ :usuario | usuario devolverPreguntasTopico:unTopico]	! !!CuOOra methodsFor: 'public' stamp: 'ValentinColato 5/7/2020 14:26'!obtenerPreguntasRelevantesde: unUsuario	| pregUsuario |	pregUsuario := unUsuario devolverPregSiguiendo .	pregUsuario		addAll:			(self obtenerPreguntas				select: [ :pregunta | 					unUsuario topicos						anySatisfy: [ :topico | pregunta esMiTopico: topico ] ]) asSet.	^pregUsuario 					! !!CuOOra methodsFor: 'public' stamp: 'ValentinColato 4/5/2020 09:46'!buscarUsuario:unNombre contraseña:unaContraseña	^ usuarios		detect: [ :each | each nombre = unNombre and:(each esMiContraseña: unaContraseña)]		ifNone: [ nil ]! !!CuOOra methodsFor: 'public' stamp: 'ValentinColato 5/7/2020 22:23'!crearTopico: unNombre desc: unaDesc	| existe |	existe := self buscarTopico: unNombre.		existe		ifNil: [ | topico |			topico := Topico newWithNombre: unNombre desc: unaDesc.			self agregarTopico: topico.			^ topico ]				ifNotNil: [ ^ existe ]! !!CuOOra methodsFor: 'public' stamp: 'donniyvalen 4/18/2020 15:13'!obtenerPreguntas	^ usuarios flatCollect: [ :each | each preguntas ]! !!CuOOra methodsFor: 'accessing' stamp: 'donniyvalen 4/14/2020 12:23'!topicos	^topicos! !!CuOOra methodsFor: 'accessing' stamp: 'donn1 4/1/2020 16:15'!usuarios	 ^usuarios! !!CuOOra methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 22:24'!cargarDatosPersonales	"Metodo encargado de cargar los datos personales de los usuarios "	| diego juan pedro p1 p2 t1 t2 t3 r1 r2 |	pedro := Usuario		newWithNombre: 'pedro@cuoora.com'		contraseña: 'pedro@cuoora.com'.	juan := Usuario		newWithNombre: 'juan@cuoora.com'		contraseña: 'juan@cuoora.com'.	diego := Usuario		newWithNombre: 'diego@cuoora.com'		contraseña: 'diego@cuoora.com'.	self		agregarUsuario: pedro;		agregarUsuario: juan;		agregarUsuario: diego.	juan seguirA: diego.	pedro seguirA: juan.	t1 := Topico newWithNombre: 'OO1' desc: '...'.	t2 := Topico newWithNombre: 'Test de unidad' desc: '...'.	self		agregarTopico: t1;		agregarTopico: t2.	p1 := Pregunta		newWithTitulo: '¿Para qué sirve el método SetUp?'		descr: '...'		topico: t1.	p1 agregarTopico: t2.	p1		agregarRta:			(Respuesta				newWithUsuario: diego				texto:					'Sirve para instanciar los objetos queson evaluados por el test en un único método y que seejecute siempre antes de cada test.').	pedro agregarPregunta: p1.	t3 := Topico newWithNombre: 'Smalltalk' desc: '...'.	self agregarTopico: t3.	p2 := Pregunta		newWithTitulo: '¿Qué significa #messageNotUnderstood?'		descr: '...'		topico: t1.	p2 agregarTopico: t3.	r2 := Respuesta		newWithUsuario: pedro		texto:			'Significa que el objeto que recibió elmensaje no encontró ningún método para ejecutar enrespuesta.'.	p2 agregarRta: r2.	diego agregarPregunta: p2! !!CuOOra methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 22:15'!agregarTopico: unTopico	(topicos noneSatisfy: [ :each | each = unTopico ]) 		ifTrue: [topicos		add: unTopico]! !!CuOOra methodsFor: 'accesing' stamp: 'donniyvalen 4/13/2020 20:45'!obtenerPregFechaHora: unUsuario"las ordena de la mas nueva a la mas antigua"	^ (self obtenerPreguntasRelevantesde: unUsuario) asOrderedCollection		sorted: [ :p1 :p2 | p1 fechahora > p2 fechahora ]! !!CuOOra methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 21:38'!creadaPorUsuario: unaPregunta	| usuarioAux |	usuarioAux := usuarios		detect: [ :each | each esMiPregunta: unaPregunta ].	^ usuarioAux ! !!CuOOra methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 22:13'!agregarTopicos: unosTopicos		unosTopicos do: [ :each | self agregarTopico: each ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'instance creation' stamp: 'donn1 4/6/2020 21:07'!clearSoleInstance	soleInstance := nil! !!CuOOra class methodsFor: 'accessing' stamp: 'ValentinColato 4/9/2020 17:39'!soleInstance	^ soleInstance ifNil: [ soleInstance := ((self new)cargarDatosPersonales ) ]	! !Object subclass: #Post	instanceVariableNames: 'fechahora votos'	classVariableNames: ''	package: 'CuOOra-Model'!!Post methodsFor: 'accesing' stamp: 'donniyvalen 4/10/2020 15:50'!likes	^ (votos select: [ :each | each like]) size! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 16:32'!dislikes	^ (votos reject: [ :each | each like]) size! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 14:07'!agregarVoto: unVoto	 votos removeAllSuchThat: [ :each | each meCreo = unVoto meCreo ].    votos add: unVoto! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 4/5/2020 18:26'!fechahora^fechahora! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 17:43'!calcularPuntaje	"recorre votos y divide en dos sets sus votos para hacer el conteo, devuelve la diferencia"^(votos sumNumbers: [ :each |  each valor])	! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 14:08'!borrarVoto: unVoto	"busca si el voto existe y lo borra de la coleccion"	 	votos removeAllSuchThat: [ :each | each meCreo = unVoto meCreo ].! !!Post methodsFor: 'accesing'!borrarme	^self subclassResponsibility! !!Post methodsFor: 'accesing' stamp: 'ValentinColato 4/1/2020 19:30'!votos^votos.! !!Post methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:51'!initialize	fechahora := DateAndTime now.	votos := Set new.! !Post subclass: #Pregunta	instanceVariableNames: 'titulo topicos rtas descr'	classVariableNames: ''	package: 'CuOOra-Model'!!Pregunta methodsFor: 'accessing' stamp: 'ValentinColato 4/18/2020 17:40'!topicos	^ topicos! !!Pregunta methodsFor: 'initialize' stamp: 'donn1 4/1/2020 18:00'!initialize	super initialize.	rtas := OrderedCollection new.	topicos := Set new! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/1/2020 17:59'!agregarTopico: unTopico	topicos		detect: [ :each | each nombre =unTopico nombre ]		ifNone: [ topicos add: unTopico ]! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/1/2020 21:05'!esMiTopico: topico	^topicos anySatisfy: [ :each | each nombre= topico nombre].	! !!Pregunta methodsFor: 'accesing'!rtasOrdenadas	^ rtas asSortedCollection: [ :unaRta :otraRta | unaRta calcularPuntaje > otraRta calcularPuntaje  ]! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/4/2020 23:49'!titulo^titulo! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 4/5/2020 14:24'!descripcion ^descr! !!Pregunta methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 15:11'!borrarme	rtas do: [ :each | each borrarme ].	rtas removeAll! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/1/2020 16:53'!respuestas	^rtas! !!Pregunta methodsFor: 'accesing' stamp: 'donn1 4/6/2020 21:39'!cantRtas	^rtas size.! !!Pregunta methodsFor: 'accesing'!devolverTopicos	^topicos! !!Pregunta methodsFor: 'setter' stamp: 'ValentinColato 5/7/2020 22:25'!newWithTitulo: unTitulo descr: unaDescripcion topicos: unosTopicos	titulo := unTitulo .	descr := unaDescripcion .	topicos := unosTopicos ! !!Pregunta methodsFor: 'setter' stamp: 'ValentinColato 5/7/2020 14:03'!agregarRta: unaRta		rtas add: unaRta! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 22:24'!newWithTitulo: unTitulo descr: unaDescripcion topico: unTopico	titulo := unTitulo.	descr := unaDescripcion.	topicos add: unTopico! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 17:17'!esUnaDeMisRtas:unaRta	^ rtas anySatisfy: [:each | each =unaRta  ] ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 22:25'!newWithTitulo: anObject1 descr: anObject2 topicos: anObject3	^ self new		newWithTitulo: anObject1		descr: anObject2		topicos: anObject3 ! !!Pregunta class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 22:24'!newWithTitulo: unTitulo descr: unaDescripcion  topico: unTopico	^ self new newWithTitulo: unTitulo  descr: unaDescripcion  topico: unTopico ! !Post subclass: #Respuesta	instanceVariableNames: 'usuario texto'	classVariableNames: ''	package: 'CuOOra-Model'!!Respuesta methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:51'!initialize	super initialize.	usuario := nil! !!Respuesta methodsFor: 'accessing'!usuario:unUsuario	usuario:=unUsuario! !!Respuesta methodsFor: 'accessing' stamp: 'ValentinColato 4/5/2020 19:10'!texto^texto .! !!Respuesta methodsFor: 'accessing' stamp: 'ValentinColato 5/7/2020 15:18'!borrarme	"invocado por pregunta"	usuario borrarRta: self.	! !!Respuesta methodsFor: 'accessing' stamp: 'ValentinColato 5/13/2020 18:32'!newWithUsuario: unUsuario texto: untexto	usuario := unUsuario.	unUsuario agregarRta: self..	texto := untexto! !!Respuesta methodsFor: 'accessing' stamp: 'ValentinColato 5/7/2020 21:58'!creadaPor	^ usuario! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 22:24'!newWithUsuario: unUsuario texto:untexto	^ self new newWithUsuario: unUsuario texto:untexto! !Object subclass: #Topico	instanceVariableNames: 'nombre desc'	classVariableNames: ''	package: 'CuOOra-Model'!!Topico methodsFor: 'setter' stamp: 'ValentinColato 5/7/2020 22:23'!newWithNombre: unNombre desc: unaDesc	nombre := unNombre.	desc := unaDesc! !!Topico methodsFor: 'accessing'!nombre	^nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 22:23'!newWithNombre:unNombre desc: unaDesc	^ self new newWithNombre:unNombre desc: unaDesc! !Object subclass: #Usuario	instanceVariableNames: 'nombre contraseña fechahora siguiendo preguntas rtas topicos'	classVariableNames: ''	package: 'CuOOra-Model'!!Usuario methodsFor: 'initialization' stamp: 'donn1 4/1/2020 17:42'!initialize	fechahora := DateAndTime.	siguiendo := Set new.	rtas := OrderedCollection new.	topicos := OrderedCollection new.	preguntas := OrderedCollection new.! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 17:37'!agregarPregunta: unaPregunta"agrega pregunta a la coleccion preguntas"preguntas  add: unaPregunta.! !!Usuario methodsFor: 'protected' stamp: 'donniyvalen 4/18/2020 15:02'!preguntas	^ preguntas! !!Usuario methodsFor: 'protected' stamp: 'donniyvalen 4/18/2020 15:12'!devolverPregSiguiendo	^ siguiendo flatCollect: [ :each | each preguntas ]! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 17:38'!agregarTopico: unTopico"agrega topico a la coleccion topicos"topicos  add: unTopico.! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 17:08'!borrarRta: unaRespuesta	"borra la respuesta de su coleccion, metodo invocado por respuesta	rtas remove: unaRespuesta"	rtas remove:unaRespuesta! !!Usuario methodsFor: 'protected' stamp: 'donni 5/15/2020 18:34'!calcularPuntaje	^ self calcularPreguntas + self calcularRespuestas! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 4/1/2020 19:24'!topicos^topicos! !!Usuario methodsFor: 'protected' stamp: 'donn1 4/1/2020 17:46'!devolverPreguntasTopico: unTopico	^ preguntas select: [ :each | each esMiTopico:unTopico ]! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 14:06'!seguirA: unUsuario	(self = unUsuario)		ifFalse: [ siguiendo add: unUsuario ]! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 4/1/2020 19:26'!siguiendo^siguiendo.! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 14:52'!borrarPreg: unaPregunta	"borra pregunta de su coleccion de preguntas y le dice a pregunta que borre todas sus respuestas"	preguntas remove: unaPregunta.	unaPregunta borrarme! !!Usuario methodsFor: 'protected' stamp: 'ValentinColato 5/7/2020 17:38'!agregarVoto: unVoto elemento: unElemento"agregar voto de pregunta o respuesta"unElemento agregarVoto: unVoto.! !!Usuario methodsFor: 'protected' stamp: 'donn1 4/1/2020 18:10'!agregarRta: unaRta	rtas add:unaRta! !!Usuario methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 17:31'!calcularRespuestas	^(rtas reject: [ :each | (preguntas anySatisfy: [ :preg | (preg esUnaDeMisRtas: each) ])]) sumNumbers:[ :rta | rta calcularPuntaje + 50 ]		! !!Usuario methodsFor: 'as yet unclassified' stamp: 'donni 5/15/2020 18:19'!dejarDeSeguirA:unUser	siguiendo remove:unUser! !!Usuario methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 15:50'!calcularPreguntas	^ preguntas sumNumbers: [:each | each calcularPuntaje + 20 ]! !!Usuario methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 16:28'!sigoA:unUser	^(siguiendo includes:unUser)! !!Usuario methodsFor: 'setter' stamp: 'ValentinColato 5/7/2020 22:22'!newWithNombre:unNombre contraseña: _contrasena	nombre :=unNombre.	contraseña := _contrasena! !!Usuario methodsFor: 'acccessing' stamp: 'ValentinColato 4/19/2020 10:34'!esMiPregunta: unaPregunta^(preguntas anySatisfy: [ :each | each = unaPregunta ])  .	! !!Usuario methodsFor: 'acccessing' stamp: 'Anonymous 5/15/2020 18:16'!esMiContraseña:unaContraseña^ contraseña = unaContraseña ! !!Usuario methodsFor: 'acccessing' stamp: 'ValentinColato 4/4/2020 23:33'!nombre^nombre! !!Usuario methodsFor: 'acccessing' stamp: 'donn1 4/1/2020 18:02'!respuestas	^rtas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 22:23'!newWithNombre: unNombre contraseña: unaContraseña	^ self new newWithNombre: unNombre contraseña: unaContraseña! !Object subclass: #Voto	instanceVariableNames: 'like fechahora usuario'	classVariableNames: ''	package: 'CuOOra-Model'!!Voto methodsFor: 'setter' stamp: 'ValentinColato 5/13/2020 18:07'!like: unLike usuario:unUsuariolike:=unLike.usuario:=unUsuario.! !!Voto methodsFor: 'initialize'!initialize fechahora :=DateAndTime .! !!Voto methodsFor: 'public'!meCreo	^usuario! !!Voto methodsFor: 'public'!like	^like! !!Voto methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 14:41'!valor	(like) ifTrue: [ ^1 ]		ifFalse: [^-1].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'constructor' stamp: 'ValentinColato 5/13/2020 18:06'!newWithLike: unUsuario	^ self new like: true usuario: unUsuario! !!Voto class methodsFor: 'instance creation' stamp: 'ValentinColato 5/13/2020 18:05'!newWithDislike:  unUsuario	^ self new like: false usuario: unUsuario! !WAComponent subclass: #ConcederAcceso	instanceVariableNames: 'username contraseña'	classVariableNames: ''	package: 'CuOOra-UI'!!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:05'!model 	^ CuOOra soleInstance ! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:08'!contraseña	^contraseña! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:09'!contraseña:anObject	contraseña :=anObject! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:09'!username: anObject 	username:=anObject! !!ConcederAcceso methodsFor: 'accessing' stamp: 'donn1 4/6/2020 21:08'!username	^username! !!ConcederAcceso methodsFor: 'accessing - private' stamp: 'ValentinColato 5/7/2020 21:35'!proceedWith: aUser	self session user: aUser.	self call: HomeComponent new! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:12'!renderButtonsOn: aCanvas	self subclassResponsibility! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:15'!renderContentOn:aCanvas	aCanvas heading:[aCanvas tableRow:[							aCanvas tableData: 'CuOOra' . aCanvas tableData align: 'left'.							aCanvas space.							]].	aCanvas form: [ 		self renderInputElementsOn: aCanvas.		self renderButtonsOn: aCanvas ] ! !!ConcederAcceso methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:16'!renderInputElementsOn: aCanvas	aCanvas label: 'Username'.	aCanvas paragraph: [ aCanvas textInput on: #username of: self ].		aCanvas label: 'Contraseña'.	aCanvas paragraph: [ aCanvas passwordInput on: #contraseña of: self ]! !ConcederAcceso subclass: #LoginComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!LoginComponent commentStamp: 'ValentinColato 5/7/2020 17:46' prior: 0!"| application |CuOOra clearSoleInstance.application := WAAdmin register: LoginComponent asApplicationAt: 'cuoora'.application sessionClass: SessionWithUser. "!!LoginComponent methodsFor: 'as yet unclassified' stamp: 'donn1 4/6/2020 21:19'!registrarNuevoUsuario	self call: RegisterComponent new! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:18'!renderButtonsOn: aCanvas		self renderSignInButtonOn: aCanvas.	aCanvas horizontalRule.	aCanvas paragraph: 'No tiene una cuenta?'.	self renderSignUpButtonOn: aCanvas! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:18'!renderSignInButtonOn: aCanvas	aCanvas submitButton		callback: [ self acceder ];		with: 'Iniciar Sesión'! !!LoginComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:19'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registrarNuevoUsuario ];		with: 'Registrate!! es gratis!!'! !!LoginComponent methodsFor: 'callback' stamp: 'donn1 4/6/2020 21:27'!acceder		(self model buscarUsuario: username contraseña: contraseña)		ifNotNil: [ :it | self proceedWith: it ].		username := nil.	contraseña := nil! !ConcederAcceso subclass: #RegisterComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!RegisterComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:43'!renderButtonsOn: aCanvas	self renderSignUpButtonOn: aCanvas! !!RegisterComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/6/2020 22:18'!renderInputElementsOn: aCanvas 		super renderInputElementsOn: aCanvas! !!RegisterComponent methodsFor: 'rendering' stamp: 'ValentinColato 5/7/2020 22:22'!registerAndLogin	| theUser |	theUser := Usuario newWithNombre: username contraseña: contraseña.	self model agregarUsuario:theUser.	self proceedWith: theUser.! !!RegisterComponent methodsFor: 'rendering' stamp: 'donn1 4/6/2020 21:37'!renderSignUpButtonOn: aCanvas	aCanvas submitButton 		callback: [ self registerAndLogin  ];		with:'Register'! !WAComponent subclass: #SesionIniciadaComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!SesionIniciadaComponent methodsFor: 'rendering' stamp: 'ValentinColato 5/13/2020 18:01'!renderContentOn: aCanvas^self subclassResponsibility ! !!SesionIniciadaComponent methodsFor: 'callbacks' stamp: 'ValentinColato 5/13/2020 18:00'!usuario	 ^self session user! !!SesionIniciadaComponent methodsFor: 'callbacks' stamp: 'ValentinColato 5/13/2020 18:12'!dislike: unaRta	unaRta agregarVoto: (Voto newWithDislike: self  usuario)! !!SesionIniciadaComponent methodsFor: 'callbacks' stamp: 'ValentinColato 5/13/2020 18:16'!responderPregunta: unaPregunta	self		call: (ResponderComponent pregunta: unaPregunta)! !!SesionIniciadaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:13'!encabezado: aCanvas	aCanvas render: (HeaderComponent padre:self)! !!SesionIniciadaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:24'!logout	self call: LoginComponent new! !!SesionIniciadaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:17'!dibujarTopicos: aCanvas pregunta: unaPregunta	unaPregunta topicos		do: [ :topico | 			aCanvas emphasis: topico nombre.			aCanvas space.]! !!SesionIniciadaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:00'!navegarAlPerfil: userVisitado	self		call: (PerfilComponent usuarioVistado: userVisitado)! !!SesionIniciadaComponent methodsFor: 'accessing' stamp: 'ValentinColato 5/13/2020 18:12'!like: unaRta	unaRta agregarVoto:  (Voto newWithLike: self usuario)! !SesionIniciadaComponent subclass: #GeneralComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	package: 'CuOOra-UI'!!GeneralComponent methodsFor: 'callback' stamp: 'ValentinColato 5/13/2020 18:24'!volver self subclassResponsibility ! !!GeneralComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/18/2020 15:26'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas space.	self formHome: aCanvas! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:24'!dibujarPregunta: aCanvas pregunta: eachP	self subclassResponsibility ! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/18/2020 15:27'!formHome:aCanvas	self subclassResponsibility ! !!GeneralComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 21:40'!visualizarPregunta: eachP	self		call: (VisualizarPreguntaComponent pregunta: eachP)! !SesionIniciadaComponent subclass: #HeaderComponent	instanceVariableNames: 'padre'	classVariableNames: ''	package: 'CuOOra-UI'!!HeaderComponent methodsFor: 'callbacks' stamp: 'ValentinColato 5/13/2020 18:22'!navegarAlPerfil	padre navegarAlPerfil: self usuario! !!HeaderComponent methodsFor: 'rendering' stamp: 'ValentinColato 5/13/2020 18:21'!renderContentOn: aCanvas	aCanvas		form: [ aCanvas heading				level: 2;				with: [ aCanvas strong: 'CuOOra  '.					aCanvas space: 150.					aCanvas anchor						callback: [ self navegarAlPerfil ];						with: (self usuario nombre splitOn: '@') first.					aCanvas space.					aCanvas submitButton						callback: [ self logout ];						with: 'Logout' ] ]! !!HeaderComponent methodsFor: 'accesing' stamp: 'ValentinColato 4/18/2020 16:01'!logout	padre logout! !!HeaderComponent methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 21:26'!padre: unPadre 	padre := unPadre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeaderComponent class	instanceVariableNames: ''!!HeaderComponent class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 21:26'!padre: unPadre 	^ self new padre: unPadre ! !GeneralComponent subclass: #HomeComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-UI'!!HomeComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:04'!formHome: aCanvas	| cincoPreguntas |	aCanvas strong: 'Ultimas preguntas'.	aCanvas		form: [ cincoPreguntas := CuOOra soleInstance obtenerPregFechaHora: self usuario.			cincoPreguntas				ifNotNil: [ (cincoPreguntas takeFirst: 5)						do: [ :each | 							aCanvas								listItem: [ aCanvas anchor										with: [ self dibujarPregunta: aCanvas pregunta: each ] ] ] ] ].	aCanvas anchor		callback: [ self crearPregunta ];		with: 'Crear Pregunta'.	aCanvas space! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:20'!crearPregunta	self call: (CrearPreguntaComponent new)! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 22:00'!dibujarPregunta: aCanvas pregunta: eachP	aCanvas anchor		callback: [ self visualizarPregunta: eachP ];		with: eachP titulo.	aCanvas		space;		text: '|';		space.	aCanvas anchor		callback:				[ self navegarAlPerfil: (CuOOra soleInstance creadaPorUsuario: eachP) ];		with:  (CuOOra soleInstance creadaPorUsuario: eachP) nombre .	aCanvas		space;		text: '|';		space.	aCanvas submitButton		callback: [ self responderPregunta: eachP ];		with: 'Responder'.	aCanvas		break;		space;		space;		space;		space.	aCanvas emphasis: 'Topicos: '.	self dibujarTopicos: aCanvas pregunta: eachP.	aCanvas break.	aCanvas submitButton		callback: [ self like: eachP ];		with: 'Like'.	aCanvas		space;		text: '|';		space.	aCanvas		text: eachP likes;		space;		text: 'Likes';		space;		text: '|';		space.	aCanvas submitButton		callback: [ self dislike: eachP ];		with: 'Dislike'.	aCanvas		space;		text: '|';		space.	aCanvas		text: eachP dislikes;		space;		text: 'Dislikes'.	aCanvas break.	aCanvas text: eachP descripcion.	aCanvas break.	aCanvas text: 'Respuestas: '.	aCanvas text: eachP cantRtas asString.	aCanvas break.	aCanvas horizontalRule! !!HomeComponent methodsFor: 'initialize' stamp: 'ValentinColato 4/14/2020 10:11'!edit: unUsuario	self call: (LoginComponent  new).! !!HomeComponent methodsFor: 'callbacks' stamp: 'ValentinColato 4/9/2020 18:14'!volverself call:LoginComponent new.! !GeneralComponent subclass: #PerfilComponent	instanceVariableNames: 'usuarioVisitado'	classVariableNames: ''	package: 'CuOOra-UI'!!PerfilComponent methodsFor: 'callback' stamp: 'ValentinColato 5/13/2020 18:18'!volver	self call: (HomeComponent new)! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/13/2020 18:04'!agregarSeguir: aCanvas	self usuario = usuarioVisitado		ifFalse: [ (self usuario sigoA: usuarioVisitado)				ifFalse: [ aCanvas anchor						callback: [ self usuario seguirA: usuarioVisitado ];						with: 'Seguir' ]				ifTrue: [ aCanvas anchor						callback: [ self usuario dejarDeSeguirA: usuarioVisitado ];						with: 'Dejar de Seguir' ] ]! !!PerfilComponent methodsFor: 'as yet unclassified'!usuarioVistado: userVisitado	usuarioVisitado := userVisitado! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 17:10'!formHome: aCanvas	| orderedPreguntas |	aCanvas text: 'Perfil de:      '.		aCanvas space.	aCanvas strong: usuarioVisitado nombre.	aCanvas space.	self agregarSeguir: aCanvas.	aCanvas horizontalRule.	aCanvas 		form: [ orderedPreguntas := usuarioVisitado preguntas				ifNotNil: [ usuarioVisitado preguntas asOrderedCollection						sorted: [ :p1 :p2 | p1 fechahora > p2 fechahora ] ].			orderedPreguntas				ifNotNil: [ orderedPreguntas						do: [ :each | 							aCanvas								listItem: [ aCanvas anchor										with: [ self dibujarPregunta: aCanvas pregunta: each ] ] ] ].			aCanvas submitButton				callback: [ self volver ];				with: 'Volver' ]! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/18/2020 18:36'!dibujarPregunta: aCanvas pregunta: eachP	aCanvas anchor		callback: [ self visualizarPregunta: eachP ];		with: eachP titulo.	aCanvas space.	aCanvas submitButton		callback: [ self responderPregunta: eachP ];		with: 'Responder'.	aCanvas break.	aCanvas		emphasis: 'Topicos';		space.	self dibujarTopicos: aCanvas pregunta: eachP.	aCanvas break.	aCanvas text: 'Respuestas: '.	aCanvas text: eachP cantRtas asString.	aCanvas break.	aCanvas		text: eachP likes;		space;		text: 'Likes '.	aCanvas		text: eachP dislikes;		space;		text: 'Dislikes'.	aCanvas break.	aCanvas submitButton		callback: [ self like: eachP ];		with: 'Like'.	aCanvas space.	aCanvas submitButton		callback: [ self dislike: eachP ];		with: 'Dislike'.	aCanvas break.	aCanvas horizontalRule! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilComponent class	instanceVariableNames: ''!!PerfilComponent class methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 21:24'!usuarioVistado: userVisitado	^ self new  usuarioVistado: userVisitado! !SesionIniciadaComponent subclass: #PreguntaComponent	instanceVariableNames: 'titulo descr'	classVariableNames: ''	package: 'CuOOra-UI'!!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/6/2020 22:39'!cancelar		self answer! !!PreguntaComponent methodsFor: 'as yet unclassified' stamp: 'donniyvalen 4/6/2020 22:46'!preguntaForm: aCanvas	aCanvas label: 'Título'.	aCanvas paragraph: [ aCanvas textInput on: #titulo of: self ].	aCanvas label: 'Descripcion'.	aCanvas paragraph: [ aCanvas textInput on: #descr of: self ]! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:45'!titulo:anObject 	titulo:=anObject! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!descr	^descr! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!titulo	^titulo ! !!PreguntaComponent methodsFor: 'accessing' stamp: 'ValentinColato 5/13/2020 18:03'!registrarPregunta	self usuario		agregarPregunta:			(Pregunta				newWithTitulo: titulo				descr: descr				topicos: (Topico newWithNombre: 'a' desc: 'b')).	self answer! !!PreguntaComponent methodsFor: 'accessing' stamp: 'donniyvalen 4/6/2020 22:46'!descr: anObject	descr := anObject! !!PreguntaComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/10/2020 14:50'!renderContentOn:aCanvas 		self subclassResponsibility! !PreguntaComponent subclass: #CrearPreguntaComponent	instanceVariableNames: 'topicosPregunta topicosInput'	classVariableNames: ''	package: 'CuOOra-UI'!!CrearPreguntaComponent methodsFor: 'accessing' stamp: 'ValentinColato 5/13/2020 18:13'!registrarPregunta	"registro la pregunta y cargo los nuevos topicos en el sistem"	self usuario		agregarPregunta:			(Pregunta				newWithTitulo: titulo				descr: descr				topicos: self seleccionarTopicos).	CuOOra soleInstance agregarTopicos: topicosInput.	self answer! !!CrearPreguntaComponent methodsFor: 'rendering' stamp: 'donniyvalen 4/14/2020 13:36'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas strong: 'Nueva Pregunta'.	aCanvas		form: [ aCanvas label: 'Título'.			aCanvas paragraph: [ aCanvas textInput on: #titulo of: self ].			aCanvas label: 'Descripcion'.			aCanvas paragraph: [ aCanvas textInput on: #descr of: self ].			aCanvas label: 'Agregar Topicos'.			aCanvas paragraph: [ aCanvas textInput on: #topicosPregunta of: self ].			aCanvas submitButton				callback: [ self registrarPregunta ];				with: 'Aceptar'.			aCanvas submitButton				callback: [ self cancelar ];				with: 'Cancelar' ]! !!CrearPreguntaComponent methodsFor: 'intialization' stamp: 'ValentinColato 5/7/2020 16:33'!initialize	topicosPregunta := ''! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:15'!topicosPregunta:unTopicotopicosPregunta :=unTopico .! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'ValentinColato 5/7/2020 22:23'!seleccionarTopicos	topicosInput := topicosPregunta asString splitOn: ', '.	^ topicosInput		collect: [ :each | Topico newWithNombre: each asLowercase desc: '...' ]! !!CrearPreguntaComponent methodsFor: 'accesing' stamp: 'donniyvalen 4/14/2020 13:15'!topicosPregunta^topicosPregunta ! !SesionIniciadaComponent subclass: #ResponderComponent	instanceVariableNames: 'pregunta newTextoRta'	classVariableNames: ''	package: 'CuOOra-UI'!!ResponderComponent methodsFor: 'rendering' stamp: 'ValentinColato 4/18/2020 18:05'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas label: pregunta titulo.	aCanvas		form: [ aCanvas				paragraph: [ aCanvas label: ''.					aCanvas textInput on: #newTextoRta of: self ].			aCanvas submitButton				callback: [ self responder ];				with: 'Responder'.				aCanvas space.			aCanvas submitButton				callback: [ self cancelar ];				with: 'Cancelar'.			aCanvas space ]! !!ResponderComponent methodsFor: 'acccessing' stamp: 'ValentinColato 4/5/2020 14:53'!newTextoRta^newTextoRta! !!ResponderComponent methodsFor: 'callback' stamp: 'ValentinColato 5/13/2020 18:03'!responder	| rta |	rta := Respuesta newWithUsuario: self usuario texto: newTextoRta.	pregunta agregarRta: rta.	self volver! !!ResponderComponent methodsFor: 'callback' stamp: 'donniyvalen 4/19/2020 15:34'!volver	self		answer"			(VisualizarPreguntaComponent usuario: usuario pregunta: pregunta)"! !!ResponderComponent methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 21:28'!pregunta: unaPregunta	pregunta := unaPregunta! !!ResponderComponent methodsFor: 'setter' stamp: 'ValentinColato 4/5/2020 18:19'!newTextoRta:unNewTextoRtanewTextoRta:=unNewTextoRta .! !!ResponderComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 4/6/2020 21:36'!cancelarself answer.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ResponderComponent class	instanceVariableNames: ''!!ResponderComponent class methodsFor: 'constructor' stamp: 'ValentinColato 5/7/2020 21:28'!pregunta: unaPregunta	^ self new  pregunta: unaPregunta! !WASession subclass: #SessionWithUser	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-UI'!!SessionWithUser methodsFor: 'accessing' stamp: 'ValentinColato 4/6/2020 19:22'!user: anObject	user := anObject! !!SessionWithUser methodsFor: 'accessing' stamp: 'ValentinColato 4/6/2020 19:22'!user	^ user! !PreguntaComponent subclass: #VisualizarPreguntaComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	package: 'CuOOra-UI'!!VisualizarPreguntaComponent methodsFor: 'intialization' stamp: 'ValentinColato 5/7/2020 21:28'!volver	self call: (HomeComponent new)! !!VisualizarPreguntaComponent methodsFor: 'callbacks' stamp: 'ValentinColato 5/7/2020 22:05'!respuestas^pregunta rtasOrdenadas! !!VisualizarPreguntaComponent methodsFor: 'rendering' stamp: 'ValentinColato 5/7/2020 21:59'!renderContentOn: aCanvas	self encabezado: aCanvas.	aCanvas		form: [ aCanvas				strong: titulo;				space;				text: '|';				space.			aCanvas anchor				callback: [ self						navegarAlPerfil: (CuOOra soleInstance creadaPorUsuario: pregunta) ];				with:  (CuOOra soleInstance creadaPorUsuario: pregunta) nombre .			aCanvas				space;				text: '|';				space.			aCanvas emphasis: descr.			aCanvas break.			aCanvas emphasis: 'Topicos: '.			self dibujarTopicos: aCanvas pregunta: pregunta.			aCanvas break.			aCanvas submitButton				callback: [ self responderPregunta: pregunta ];				with: 'Responder'.			aCanvas horizontalRule.			self dibujarRtas: aCanvas.			aCanvas horizontalRule.			aCanvas space.			aCanvas submitButton				callback: [ self volver ];				with: 'Volver' ]! !!VisualizarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 22:06'!dibujarRtas: aCanvas	aCanvas strong: 'Respuestas: '.	aCanvas break.	aCanvas break.	self respuestas		do: [ :rta | 			aCanvas				listItem: [ aCanvas text: rta texto.					aCanvas						space;						text: '|';						space.					aCanvas anchor						callback: [ self navegarAlPerfil: rta creadaPor ];						with: rta creadaPor nombre.					aCanvas						space;						text: '|';						space.					aCanvas submitButton						callback: [ self like: rta ];						with: 'Like'.					aCanvas						space;						text: '|';						space.					aCanvas						text: rta likes;						space;						text: 'Likes';						space;						text: '|';						space.					aCanvas submitButton						callback: [ self dislike: rta ];						with: 'Dislike'.					aCanvas						space;						text: '|';						space.					aCanvas						text: rta dislikes;						space;						text: 'Dislikes'.					aCanvas						break;						break ] ]! !!VisualizarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 22:04'!pregunta: unaPregunta	pregunta := unaPregunta.	titulo := unaPregunta titulo.	descr := unaPregunta descripcion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VisualizarPreguntaComponent class	instanceVariableNames: ''!!VisualizarPreguntaComponent class methodsFor: 'as yet unclassified' stamp: 'ValentinColato 5/7/2020 21:41'!pregunta: unaPregunta	^ self new pregunta: unaPregunta! !